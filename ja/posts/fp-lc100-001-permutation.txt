3:I[78703,[],""]
6:I[53751,[],""]
7:I[59576,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"Providers"]
4:["locale","ja","d"]
5:["slug","fp-lc100-001-permutation","d"]
0:["nXt9FzmIDfEVB2NU5Aav0",[[["",{"children":[["locale","ja","d"],{"children":["posts",{"children":[["slug","fp-lc100-001-permutation","d"],{"children":["__PAGE__?{\"locale\":\"ja\",\"slug\":\"fp-lc100-001-permutation\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":[["locale","ja","d"],{"children":["posts",{"children":[["slug","fp-lc100-001-permutation","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},[["$","div",null,{"className":" relative w-full py-12 shadow-xl shadow-slate-700/20 ring-1 ring-gray-900/5 dark:shadow-slate-100/20 dark:ring-gray-100/5 lg:mx-auto lg:max-w-4xl lg:pt-16 lg:pb-28 bg-lightwhite dark:bg-lightblack","children":["$","div",null,{"className":"prose prose-natural dark:prose-invert mx-auto max-w-full px-8 sm:px-16 relative","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","posts","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97d548e729a05adf.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]}],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ja","suppressHydrationWarning":true,"children":["$","body",null,{"className":"text-foreground bg-background min-h-screen","children":["$","$L7",null,{"children":["$L8",["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]}]}]}],null],null]},[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/57e8d276a38ab64c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ad2762ca96cee671.css","precedence":"next","crossOrigin":"$undefined"}]]}],null],null],[null,"$L9"]]]]
a:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"Navbar"]
b:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"NavbarBrand"]
d:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"NavbarItem"]
10:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"NavbarContent"]
11:I[81946,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"default"]
12:I[48125,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"default"]
8:["$","$La",null,{"shouldHideOnScroll":true,"children":[["$","$Lb",null,{"className":"flex flex-row gap-4","children":[["$","p",null,{"className":"font-bold text-inherit","children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],["$","$Ld",null,{"children":"$Lf"}]]}],["$","$L10",null,{"justify":"end","className":"gap-1","children":[["$","$Ld",null,{"children":["$","$L11",null,{}]}],["$","$Ld",null,{"children":["$","$L12",null,{}]}]]}]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Aya's Blog"}],["$","meta","3",{"name":"description","content":"A site powered by next.js and pandoc"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
13:I[9678,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"default"]
c:["$","$L13",null,{"locale":"ja","localePrefix":"always","href":"/","aria-label":"ホーム","children":"ホーム"}]
e:["$","$L13",null,{"locale":"ja","localePrefix":"always","href":"/blog/","className":"font-bold","aria-label":"ブログ","children":"ブログ"}]
f:["$","$L13",null,{"locale":"ja","localePrefix":"always","href":"/favorites/","className":"font-bold","aria-label":"心の庭","children":"心の庭"}]
14:"$Sreact.fragment"
15:I[75164,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],"default"]
16:I[37006,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],"default"]
17:I[65469,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],""]
1a:I[39926,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],"default"]
1d:I[27377,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],"default"]
18:T11af,<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>next</mtext><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="double-struck">P</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="double-struck">P</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mo stretchy="false">{</mo><mi>m</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mo>∈</mo><mi mathvariant="double-struck">P</mi><mo separator="true">,</mo><mi>m</mi><mo>&gt;</mo><mi>a</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>それ以外</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
\text{next}(a) = \begin{cases}
  \min(\mathbb{P}) &amp; a = \max(\mathbb{P}) \\
  \min(\{ m | m \in \mathbb{P}, m &gt; a \}) &amp; \text{それ以外}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">next</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">min</span><span class="mopen">(</span><span class="mord mathbb">P</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">min</span><span class="mopen">({</span><span class="mord mathnormal">m</span><span class="mord">∣</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbb">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mclose">})</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord mathbb">P</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">それ以外</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>19:T49d,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x) = x + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>1b:T557,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[j] &gt; a[i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>1c:Tb8c,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>k</mi><mo>≥</mo><mi>i</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>→</mo><mi>a</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>≥</mo><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\forall k \ge i, a[k] &gt; a[i - 1] \to a[k] \ge a[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>2:["$","div",null,{"children":[["$","h1",null,{"className":"text-4xl font-bold mb-2","children":"関数型 Leetcode 百題 – 順列"}],["$","div",null,{"className":"text-sm text-gray-500 mb-5","children":"4/24/2024"}],["$","$14","0",{"children":[["$","$L15",null,{"children":[["$","ul","0",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"#序章","id":"toc-序章","children":["序章"]}]]}],["$","li","1",{"children":[["$","a","0",{"href":"#次の順列","id":"toc-次の順列","children":["31."," ","次の順列"]}],["$","ul","1",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"#問題の説明","id":"toc-問題の説明","children":["問題の説明"]}]]}],["$","li","1",{"children":[["$","a","0",{"href":"#最初の考え","id":"toc-最初の考え","children":["最初の考え"]}]]}],["$","li","2",{"children":[["$","a","0",{"href":"#再帰","id":"toc-再帰","children":["再帰"]}]]}],["$","li","3",{"children":[["$","a","0",{"href":"#ismax-の定義","id":"toc-ismax-の定義","children":[["$","code","0",{"children":["isMax"]}]," ","の定義"]}]]}],["$","li","4",{"children":[["$","a","0",{"href":"#tick-の定義","id":"toc-tick-の定義","children":[["$","code","0",{"children":["tick"]}]," ","の定義"]}]]}],["$","li","5",{"children":[["$","a","0",{"href":"#より効率的なコード","id":"toc-より効率的なコード","children":["より効率的なコード"]}]]}],["$","li","6",{"children":[["$","a","0",{"href":"#結論","id":"toc-結論","children":["結論"]}]]}]]}]]}]]}]]}],["$","article","1",{"children":[["$","$L16",null,{"type":"warning","children":[["$","p",null,{"children":["この記事は"," ","AI"," ","による中国語からの翻訳です。誤りが含まれている可能性がありますので、ご了承ください。"]}]]}],["$","h2",null,{"className":"text-3xl","id":"序章","children":[["$","$L17",null,{"href":"#序章","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["序章"]}]]]}],["$","p",null,{"children":["アルゴリズムの問題は、多くのプログラマにとっての悪夢の一つです。アルゴリズム自体は確かに興味深いものですが、問題を解けない焦燥感や面接で答えられない恥ずかしさは誰もが好まないものです。"]}],["$","p",null,{"children":["アルゴリズムの問題への対処法としては、",["$","strong","0",{"children":["問題を解く"]}]," ","という伝統的な方法があります。問題を解くとは、大量の問題を解いてアルゴリズムを学ぶことです。多くの人々は、数学の学習もアルゴリズムの学習も、大量の練習が必要だと信じています。"]}],["$","p",null,{"children":["私もその理論に賛成です。ノイマンの格言は、このブログのトップページに掲げられています："]}],["$","blockquote","5",{"children":[["$","p",null,{"children":["若者よ、数学では物事を理解するのではなく、慣れるだけだ。"]}]]}],["$","p",null,{"children":["直感的な理解、直感的な経験は、無比の価値を持つ財産です。練習はその貴重な財産を得る最も確実な手段です。要するに、アルゴリズムを学ぶためには、問題を解き、練習しなければなりません。"]}],["$","p",null,{"children":["しかし、私はある種のアルゴリズム学習の常道を極度に嫌っています。それは、ある問題を解けない、10分間考えてからも手がかりが見つからない、そこで答えを探すという道です。あなたは答えを"," ",["$","q","0",{"children":[["$","span","0",{"className":"cjk","children":["理解"]}]]}]," ","したり、答えを覚えておいたり、次に同じ問題が出てきたときに当てはめたりするかもしれません。あなたが見た答えが十分に多いなら、あなたが"," ",["$","q","1",{"children":["当てはめる"]}]," ","ことができる問題も十分に多いでしょう。"]}],["$","p",null,{"children":["なぜ私はその学習法が好きではないのでしょうか？私はそれほど頭が良くないのかもしれません。私は他人が提供する答えを"," ",["$","q","0",{"children":[["$","span","0",{"className":"cjk","children":["理解"]}]]}]," ","するのが難しいです。あまりにも多くの人々は、最終的な効率的なアルゴリズムだけを教えてくれ、直感の形成の過程やアルゴリズムの証明を無視します。彼らの答えから、彼らが問題に対する深い理解を感じさせられず、またアルゴリズム自体の美しさを感じさせられません。"]}],["$","p",null,{"children":["私たちは、",["$","q","0",{"children":[["$","span","0",{"className":"cjk","children":["天才"]}]]}]," ","に向けた教育を通じてしかアルゴリズムを学ぶことができないのでしょうか？"]}],["$","p",null,{"children":["いいえ。世界には、純粋な関数型言語を使い、等式推導の方法でプログラムを設計しようとする人々がいます。彼らもまた直感の価値を大切にしています。彼らは、明確で効率の悪いプログラムから出発し、最終的な効率的なアルゴリズムへと一歩ずつ進みます。その過程で、アルゴリズムの美しさ、アルゴリズムの洞察が鮮やかに浮かび上がります。故リチャード・バード（Richard"," ","Bird）や台湾の穆"," ",["$","span","0",{"className":"cjk","children":["信成"]}]," ","先生は、その手法の先駆者です。彼らの論文と本の中で、私は真の優しさを感じました。"]}],["$","p",null,{"children":["私は、等式推導はしばしば非常に困難であるかもしれませんが、アルゴリズムの"," ","non-trivial"," ","な部分が何であるか、アルゴリズムの直感が何であるかを明確に説明することは、それほど困難ではないかもしれません、と考えています。"]}],["$","p",null,{"children":["このシリーズの記事は、私の試みです。これらの記事では、私は純粋な関数型プログラミングを使って"," ","Leetcode"," ","をどのように解くかを説明します。なぜ"," ","Leetcode"," ","を選んだのか、より難易度の高い"," ","Codeforces"," ","を選ばなかったのかというと、難易度が高すぎることは必ずしも良いことではないと考えているからです。難易度の高い問題は、しばしば複数のアルゴリズムが必要となる可能性があり、私たちは各記事で特定のアルゴリズムに焦点を当てたいと思っています。（もう一つの理由は、私自身がアルゴリズムに関しては"," ",["$","q","0",{"children":[["$","span","0",{"className":"cjk","children":["初心者"]}]]}]," ","であるため、難易度が高すぎると対処できません）"]}],["$","p",null,{"children":["Leetcode"," ","を選んだ結果、私たちは"," ","Haskell"," ","ではなく"," ","Racket"," ","や"," ","Scala"," ","を使ってコードを提出しなければならないことがあります。これは時々問題を引き起こす可能性がありますが、私の経験では、私が提示するほとんどの"," ","Haskell"," ","コードは"," ","Scala"," ","に直接翻訳できます。各問題に対して、私は対応する"," ","Scala"," ","の解も提供します。もし問題が生じた場合、たとえば"," ","Scala"," ","に"," ",["$","code","0",{"children":["Data.Graph"]}]," ","という不変データ構造のライブラリがない場合など、私たちは状況により非純粋な関数型プログラミングに戻ることもあります。しかし、そのような状況は全体的には少ないはずです。各問題の最後には、対応する命令型のバージョンも提供するかもしれません。その場合、私たちは関数型バージョンと命令型バージョンの違いについても議論するかもしれません。"]}],["$","p",null,{"children":["これらの記事は"," ",["$","q","0",{"children":["関数型プログラミング入門"]}]," ","ではありません。私はおそらくいくつかのライブラリ関数の使い方を示すかもしれませんが、全体的には、これらの記事はあなたがすでに純粋な関数型プログラミングの基本的な知識を持っていることを前提としています"," ","–"," ","再帰、リスト、fold、map"," ","など。あなたが関数型プログラミングや"," ","Haskell"," ","言語について何も知らない場合、これらの記事を読む前に、いくつかの"," ","Haskell"," ","の知識を学ぶことをお勧めします。以下は、私が特に推奨する学習リソースです："]}],["$","ul","15",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"https://www.seas.upenn.edu/~cis1940/spring13/lectures.html","children":["cis194"," ","コース"]}]]}],["$","li","1",{"children":[["$","em","0",{"children":["Thinking"," ","Functionally"," ","With"," ","Haskell"]}],"、およびその中国語翻訳版"," ",["$","a","1",{"href":"https://book.douban.com/subject/26769112/","children":["Haskell関数型プログラム設計"]}]]}],["$","li","2",{"children":["練習は重要です。",["$","a","0",{"href":"https://wiki.haskell.org/99_questions/1_to_10","children":["Haskell"," ","99"," ",["$","span","0",{"className":"cjk","children":["問"]}]]}],"を通じて練習することができます。これらの練習は"," ","Leetcode"," ","とは異なり、ほとんどが直接の再帰で完了できます"]}]]}],["$","blockquote","16",{"children":[["$","p",null,{"children":["道は遠く、修業は長し、上下に求めて進む"]}]]}],["$","h2",null,{"className":"text-3xl","id":"次の順列","children":[["$","$L17",null,{"href":"#次の順列","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["31."," ","次の順列"]]}],["$","h3",null,{"className":"text-2xl","id":"問題の説明","children":[["$","$L17",null,{"href":"#問題の説明","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["問題の説明"]]}],["$","p",null,{"children":["以下は、",["$","a","0",{"href":"https://leetcode.cn/problems/next-permutation/","children":["Leetcode"]}]," ","の元の説明です："]}],["$","blockquote","20",{"children":[["$","p",null,{"children":["整数配列の"," ",["$","strong","0",{"children":[["$","span","0",{"className":"cjk","children":["順列"]}]]}]," ","とは、そのすべてのメンバーを一連または線形の順序で並べることです。"]}],["$","p",null,{"children":["例えば、",["$","code","0",{"children":["arr = [1,2,3]"]}]," ","の場合、以下のようなものはすべて"," ",["$","code","1",{"children":["arr"]}]," ","の順列と見なすことができます：",["$","code","2",{"children":["[1,2,3]"]}],["$","span","3",{"className":"cjk","children":["、"]}],["$","code","4",{"children":["[1,3,2]"]}],["$","span","5",{"className":"cjk","children":["、"]}],["$","code","6",{"children":["[3,1,2]"]}],["$","span","7",{"className":"cjk","children":["、"]}],["$","code","8",{"children":["[2,3,1]"]}]," ",["$","span","9",{"className":"cjk","children":["。"]}]," ","整数配列の"," ","次の順列"," ","とは、その整数の次の辞書順の大きい順列を指します。より形式的に言えば、配列のすべての順列が辞書順で小さい順に並べられたコンテナに存在すると仮定すると、その配列の"," ","次の順列"," ","とは、その順序付けられたコンテナの中でその配列の直後に存在する順列を指します。次の大きな順列が存在しない場合、その配列は辞書順で最小の順列（つまり、その要素が昇順に並んでいる）に再配置する必要があります。"]}],["$","p",null,{"children":["例えば、",["$","code","0",{"children":["arr = [1,2,3]"]}]," ","の次の順列は"," ",["$","code","1",{"children":["[1,3,2]"]}]," ","です。"," ","同様に、",["$","code","2",{"children":["arr = [2,3,1]"]}]," ","の次の順列は"," ",["$","code","3",{"children":["[3,1,2]"]}]," ","です。"," ","そして"," ",["$","code","4",{"children":["arr = [3,2,1]"]}]," ","の次の順列は"," ",["$","code","5",{"children":["[1,2,3]"]}]," ","です、なぜなら"," ",["$","code","6",{"children":["[3,2,1]"]}]," ","は辞書順でより大きな順列が存在しないからです。"," ",["$","span","7",{"className":"cjk","children":["整数配列"]}]," ",["$","code","8",{"children":["nums"]}]," ","を与えられた場合、",["$","code","9",{"children":["nums"]}]," ","の次の順列を見つけ出してください。"]}],["$","p",null,{"children":["必ずインプレースで値を変更し、追加の定数スペースしか使用しないようにしてください。"]}]]}],["$","p",null,{"children":["私たちは純粋な関数型プログラミングを行っています。純粋な関数型プログラミングでは"," ",["$","q","0",{"children":[["$","span","0",{"className":"cjk","children":["変更"]}]]}]," ","という概念は存在しないため、最後の文は無視します。"]}],["$","h3",null,{"className":"text-2xl","id":"最初の考え","children":[["$","$L17",null,{"href":"#最初の考え","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["最初の考え"]]}],["$","p",null,{"children":["一般的に、多くのアルゴリズムの問題は、非常に簡潔（しかし効率が低い）純粋な関数型解を与えることができます。私たちはその解をプログラムの標準参照（Spec）と呼び、私たちの思考はそこから始まります。しかし、この問題はそのような状況ではないようです。この問題の数学的な表現を考えます："]}],["$","div",null,{"children":[["$","div",null,{"className":"overflow-auto","children":["$","div",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$18"}}]}]]}],["$","p",null,{"children":["これは私たちにあまりインスピレーションを与えません。実際、多くのプログラミング言語では、",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">P</span></span></span></span>"}}],"、つまりあるリストのすべての順列を求めるのが、この問題よりも面倒な場合があります。",["$","sup","1",{"children":[["$","a","0",{"href":"#note-1","id":"note-anchor-1","children":["1"]}]]}]]}],["$","p",null,{"children":["そのような状況下、",["$","strong","0",{"children":["単純な再帰"]}]," ","が問題を解決できるのでしょうか？"]}],["$","h3",null,{"className":"text-2xl","id":"再帰","children":[["$","$L17",null,{"href":"#再帰","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["再帰"]}]]]}],["$","p",null,{"children":["次の順列関数（",["$","code","0",{"children":["next"]}]," ","と記す）は、順列と辞書順に基づいて定義されていますが、それはより一般的な構造に拡張される可能性があります。"]}],["$","p",null,{"children":["まず、10進数の整数の状況を検討します。明らかに、10進数の整数にも"," ",["$","code","0",{"children":["next"]}]," ","関数を定義できます。これは大名鼎鼎の"," ",["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["後続"]}]]}]," ","関数で、すなわち"," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$19"}}]," ","です。"]}],["$","p",null,{"children":["10進数の整数は、リスト（または、命令型言語の配列）として表現できます。リストの各要素は、数字の各桁を示します。たとえば、",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span>"}}]," ","は"," ",["$","code","1",{"children":["[1, 0, 0]"]}]," ","として表現されます。"]}],["$","p",null,{"children":["私たちは特に、リスト表現下の後続関数に注目します。なぜなら、そのような表現下では、",["$","code","0",{"children":[">="]}]," ","はちょうど辞書順の比較であるからです。私たちはリスト表現下、10進数の整数の後続関数を"," ",["$","code","1",{"children":["next10"]}]," ","と記します。"]}],["$","$L1a","32",{"className":"haskell","children":["-- next10 [1, 1, 0] = [1, 1, 1]\nnext10 ..."]}],["$","p",null,{"children":["たとえば、",["$","code","0",{"children":["next10 [1, 1, 0] = [1, 1, 1]"]}]," ","です。"]}],["$","p",null,{"children":["この例は私たちに非常に強い直感を与えます。それは"," ",["$","code","0",{"children":["next10 [1, 0] = [1, 1]"]}]," ","のとき、",["$","code","1",{"children":["next10 [1, 1, 0] = 1 : next10 [1, 0]"]}]," ","となることです。これを一般化すると、",["$","code","2",{"children":["x:xs"]}]," ","で表現された整数に対して、"]}],["$","$L1a","35",{"className":"haskell","children":["next10 (x:xs) = x:(next10 xs)"]}],["$","p",null,{"children":["上記の式はほとんどの場合に成り立ちます。ただし、",["$","code","0",{"children":["next10 xs"]}]," ","が"," ",["$","q","1",{"children":["求められなくなる"]}]," ","とき、たとえば"," ",["$","code","2",{"children":["[1, 9, 9]"]}]," ","の次の数（後続）は"," ",["$","code","3",{"children":["[2, 0, 0]"]}]," ","で、そのときには"," ",["$","q","4",{"children":["繰り上がり"]}]," ","が必要となります。より厳密に言えば、",["$","code","5",{"children":["99"]}]," ","は"," ",["$","strong","6",{"children":[["$","span","0",{"className":"cjk","children":["最大"]}]]}]," ","の2桁の10進数整数であるため、上記の等式は成り立ちません。",["$","code","7",{"children":["xs"]}]," ","がまだ最大値でない限り、上記の等式は成り立つことが証明できます。"]}],["$","p",null,{"children":["同様に、問題で求められている"," ",["$","code","0",{"children":["next"]}]," ","関数も同様の性質を持つことが証明できます：",["$","code","1",{"children":["xs"]}]," ","が長さ"," ",["$","code","2",{"children":["length xs"]}]," ","の順列の最大値でないとき、"]}],["$","$L1a","38",{"className":"haskell","children":["next (x:xs) = x:next xs"]}],["$","p",null,{"children":["この性質はあまりにも重要で、私たちは直接再帰関数を構築することができます："]}],["$","$L1a","40",{"className":"haskell","children":["next (x:xs)\n    | isMax xs  = tick x xs\n    | otherwise = x:next xs"]}],["$","p",null,{"children":["それでは、問題は次の2つになります"]}],["$","ol","42",{"children":[["$","li","0",{"children":[["$","code","0",{"children":["isMax"]}]," ","をどのように定義するか"]}],["$","li","1",{"children":[["$","code","0",{"children":["xs"]}]," ","がすでに最大値である場合、",["$","code","1",{"children":["tick"]}]," ","関数をどのように定義するか"]}]]}],["$","h3",null,{"className":"text-2xl","id":"ismax-の定義","children":[["$","$L17",null,{"href":"#ismax-の定義","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","code","0",{"children":["isMax"]}]," ","の定義"]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["順列"]}]," ",["$","code","1",{"children":["xs"]}]," ","に対して、「最大」は、どのように再配置しても、新しい"," ",["$","code","2",{"children":["xs'"]}]," ","に対して"," ",["$","code","3",{"children":["xs >= xs'"]}]," ","が成り立つことを意味します。"]}],["$","p",null,{"children":["どのような順列がそのような性質を持つのでしょうか？直感的な考え方は、これは辞書順であるため、順列が可能な限り大きくなるためには、大きな数を前に置くべきだということです。言い換えれば、「降順」の順列は必ず最大であるはずです。"]}],["$","$L1a","46",{"className":"haskell","children":["isMax :: Ord a => [a] -> Bool\nisMax = down"]}],["$","p",null,{"children":["Haskellでリストの昇順または降順を判断するには、「zip"," ","with"," ","tail」の方法を使用できます。具体的には、リストとその",["$","code","0",{"children":["tail"]}],"を",["$","code","1",{"children":["zip"]}],"し、その後",["$","code","2",{"children":["map"]}],"や",["$","code","3",{"children":["all"]}],"などの関数を使用して判断します。"]}],["$","$L1a","48",{"className":"haskell","children":["dup :: [a] -> [(a, a)]\ndup xs = zip xs (tail xs)\n\ndown :: Ord a => [a] -> Bool\ndown = all (uncurry (>=)) . dup"]}],["$","h3",null,{"className":"text-2xl","id":"tick-の定義","children":[["$","$L17",null,{"href":"#tick-の定義","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","code","0",{"children":["tick"]}]," ","の定義"]]}],["$","p",null,{"children":["もし"," ",["$","code","0",{"children":["xs"]}]," ","が"," ",["$","code","1",{"children":["down"]}]," ","を満たしている場合、言い換えれば、それが最大である場合、",["$","code","2",{"children":["x:xs"]}]," ","を次の列挙に変換するためには複雑な操作が必要となります。この複雑な操作を、私は",["$","code","3",{"children":["tick"]}],"と名付けました。"]}],["$","p",null,{"children":["例えば、",["$","code","0",{"children":["[2, 4, 3, 1]"]}],"の次の列挙は",["$","code","1",{"children":["[3, 1, 2, 4]"]}],"です。このとき、",["$","code","2",{"children":["x"]}],"は",["$","code","3",{"children":["2"]}],["$","span","4",{"className":"cjk","children":["、"]}],["$","code","5",{"children":["xs"]}],"は",["$","code","6",{"children":["[4, 3, 1]"]}],"で、",["$","code","7",{"children":["xs"]}],"が",["$","code","8",{"children":["down"]}],"を満たしているため、単純な再帰ではなく、",["$","code","9",{"children":["tick"]}],"を使用して計算する必要があります。"]}],["$","p",null,{"children":[["$","code","0",{"children":["[2, 4, 3, 1]"]}],"を引き続き例にとってみましょう。直感的に、",["$","code","1",{"children":["[2, 4, 3, 1]"]}],"の次の列挙",["$","code","2",{"children":["ys@(y:ys')"]}],"を得るためには、次の2つのステップに分けられます："]}],["$","ul","53",{"children":[["$","li","0",{"children":[["$","code","0",{"children":["y"]}],"が何であるかを決定する"]}],["$","li","1",{"children":[["$","code","0",{"children":["ys'"]}],"が何であるかを決定する"]}]]}],["$","p",null,{"children":["まず、",["$","code","0",{"children":["y"]}],"は",["$","code","1",{"children":["x"]}],"より厳密に大きでなければなりません。なぜなら、私たちはすでに、",["$","code","2",{"children":["x"]}],"で始まるすべての列挙が",["$","code","3",{"children":["x:xs"]}],"より小さいことを示したからです。次に、",["$","code","4",{"children":["y"]}],"は可能な限り小さくなければなりません、そうでなければ、",["$","code","5",{"children":["p"]}],"というより小さい列挙が存在し、",["$","code","6",{"children":["p > x:xs"]}],"となります。"]}],["$","p",null,{"children":["上記の例では",["$","code","0",{"children":["y"]}],"は",["$","code","1",{"children":["3"]}],"です。すぐに思いつくのは、",["$","code","2",{"children":["3"]}],"は",["$","code","3",{"children":["xs = [4, 3, 1]"]}],"の中で、",["$","strong","4",{"children":["最小の"]}]," ",["$","code","5",{"children":["x = 2"]}],"より大きい数です。私たちはこのような数を",["$","code","6",{"children":["pivot"]}],"と呼びます。定義コードを以下に示します："]}],["$","$L1a","56",{"className":"haskell","children":["pivot x xs = minimum [ x' | x' <- xs, x' > x  ]"]}],["$","p",null,{"children":[["$","code","0",{"children":["xs"]}],"が順序付けられていることに注意してください。上記のコードは以下のように書き換えることができます。"]}],["$","$L1a","58",{"className":"haskell","children":["pivot x = last . takeWhile (> x)"]}],["$","p",null,{"children":["指摘しておくべきは、",["$","code","0",{"children":["pivot"]}],"関数は部分関数であり、不安全な",["$","code","1",{"children":["last"]}],"と",["$","code","2",{"children":["minimum"]}],"操作を使用しているため、呼び出す際には少なくとも1つの",["$","code","3",{"children":["x' > x"]}],"が存在することを保証しなければなりません。"]}],["$","p",null,{"children":[["$","code","0",{"children":["y > x"]}],"を見つけることができれば、",["$","code","1",{"children":["y:ys'"]}],"は必ず",["$","code","2",{"children":["x:xs"]}],"より大きくなることを保証できます。したがって、",["$","code","3",{"children":["ys'"]}],"の構築は",["$","code","4",{"children":["y:ys'"]}],"を可能な限り小さくするように行います。言い換えれば、",["$","code","5",{"children":["ys'"]}],"は最小の列挙でなければなりません。最大値についての上記の議論と同様に、最小の列挙は単調増加の列挙です。これを行うためにはソートが必要です。"]}],["$","p",null,{"children":[["$","code","0",{"children":["ys'"]}],"の要素は",["$","code","1",{"children":["xs"]}],"から",["$","code","2",{"children":["y"]}],"を取り除いた後、",["$","code","3",{"children":["x"]}],"を追加したものです。例えば、上記の例",["$","code","4",{"children":["[2, 4, 3, 1]"]}],"では、"]}],["$","$L1a","62",{"className":"haskell","children":["x:xs = [2, 4, 3, 1]\n\ny = last . takeWhile (> x) $ xs\n  = last [4, 3]\n  = 3\n\nys'' = delete 3 xs\n     = [4, 1]\n\nys' = sort (x:ys'')\n    = sort [2, 4, 1]\n    = [1, 2, 4]\n\nys = y:ys'\n   = [3, 1, 2, 4]"]}],["$","p",null,{"children":["最後に、",["$","code","0",{"children":["pivot x xs = ⊥"]}],"という状況について議論する必要があります。この状況は事前に判断する必要があります、そうでなければエラーが発生します。",["$","code","1",{"children":["pivot"]}],"が存在しないのはいつでしょうか？それは",["$","code","2",{"children":["x:xs"]}],"が",["$","code","3",{"children":["down"]}],"を満たしているときです、例えば",["$","code","4",{"children":["[4, 3, 2, 1]"]}],"のとき、このとき、入力を反転するだけで済みます。"]}],["$","p",null,{"children":["以上の議論に基づき、",["$","code","0",{"children":["tick"]}],"関数の定義を以下に示します："]}],["$","$L1a","65",{"className":"haskell","children":["import Data.List (delete)\n\ntick :: Ord a -> a -> [a] -> [a]\ntick x xs\n    | null l    = reverse (x:xs)\n    | otherwise = y:(sort (x:ys'))\n    where l = takeWhile (> x) xs\n          y = last l\n          ys' = delete y xs"]}],["$","$L1a","66",{"className":"haskell","children":["> tick 4 [3, 2, 1]\n[1, 2, 3, 4]\n\n> tick 2 [4, 3, 1]\n[3, 1, 2, 4]"]}],["$","p",null,{"children":["疑いの余地なく、現在の",["$","code","0",{"children":["next"]}],"関数はこの問題を正しく解決しています。読者は上記のHaskellコードをScalaに翻訳し、Leetcodeで試してみてください。再帰から出発し、この問題の解は非常に直感的で、簡単に且つ楽に提供できます。"]}],["$","h3",null,{"className":"text-2xl","id":"より効率的なコード","children":[["$","$L17",null,{"href":"#より効率的なコード","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["より効率的なコード"]]}],["$","p",null,{"children":["上記で定義した",["$","code","0",{"children":["next"]}],"関数は優雅で直感的ですが、十分に効率的ではありません。主な問題は、"]}],["$","ol","70",{"children":[["$","li","0",{"children":[["$","code","0",{"children":["tick"]}],"では、",["$","code","1",{"children":["sort"]}],"を使用する必要はありません。",["$","code","2",{"children":["xs"]}],"は順序付けられているため、この点を利用して新しい順序付けられた列挙を",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}],"内で組み合わせることができます"]}],["$","li","1",{"children":[["$","code","0",{"children":["down"]}],"は",["$","code","1",{"children":["next"]}],"によって何度も呼び出され、各呼び出しは",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}],"のため、全体の複雑度が",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>"}}],"になります。"]}]]}],["$","p",null,{"children":["問題1.は非常に簡単で、",["$","code","0",{"children":["tick"]}],"を再定義するだけで済みます。"]}],["$","p",null,{"children":["問題2.は少し複雑です。計算の過程を詳しく観察する必要があります、例えば",["$","code","0",{"children":["next [3, 5, 1, 4, 2]"]}],["$","span","1",{"className":"cjk","children":["："]}]]}],["$","$L1a","73",{"className":"haskell","children":["next [3, 5, 1, 4, 2]\n= 3:(next [5, 1, 4, 2])\n= 3:(5:(next [1, 4, 2]))\n= 3:(5:(tick 1 [4, 2]))"]}],["$","p",null,{"children":["計算は常に一種の「形状」を持ち、それは入力の前半部分が不変で、後半部分が",["$","code","0",{"children":["tick"]}],"されることです。"]}],["$","$L1a","75",{"className":"haskell","children":["[3, 5,           1, 4, 2]\n^^^^^^           #######\n不変の部分     tickの部分"]}],["$","p",null,{"children":["直感的には、その境界線は",["$","code","0",{"children":["down"]}],"が",["$","code","1",{"children":["False"]}],"から",["$","code","2",{"children":["True"]}],"に変わる瞬間です。再び",["$","code","3",{"children":["next"]}],"関数に戻ります："]}],["$","$L1a","77",{"className":"haskell","children":["next (x:xs)\n    | down xs  = tick x xs\n    | otherwise = x:next xs"]}],["$","p",null,{"children":["各再帰のとき、",["$","code","0",{"children":["next (x:xs)"]}],"は",["$","code","1",{"children":["down xs"]}],"を計算し、先ほどの例を再利用します、"]}],["$","$L1a","79",{"className":"haskell","children":["-- 第一次再帰\ndown [5, 1, 4, 2] = False\n-- 第二次再帰\ndown [1, 4, 2]    = False\n-- 第三次再帰\ndown [4, 2]       = True"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["実際、"]}],["$","code","1",{"children":["down"]}],"は常に",["$","code","2",{"children":["tails"]}],"の次の要素を順序に計算します："]}],["$","$L1a","81",{"className":"haskell","children":["> tails [3, 5, 1, 4, 2]\n[[3,5,1,4,2],[5,1,4,2],[1,4,2],[4,2],[2],[]]"]}],["$","p",null,{"children":[["$","code","0",{"children":["next"]}],"が各回使用する",["$","code","1",{"children":["down xs"]}],"をあらかじめ",["$","sup","2",{"children":[["$","a","0",{"href":"#note-2","id":"note-anchor-2","children":["2"]}]]}],"計算し、リストに保存します。"]}],["$","$L1a","83",{"className":"haskell","children":["import Data.List (tails)\n\nnextDown (x:xs) (d:ds)\n    | d = tick x xs\n    | otherwise = x:nextDown xs ds\n\nnext xs = nextDown xs (downs xs)\ndowns = drop 1 . map down . tails"]}],["$","p",null,{"children":["もし",["$","code","0",{"children":["downs"]}],"を",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}],"時間内で計算できれば、問題2.は解決します。直感的には、これは非常に簡単です、なぜなら",["$","code","2",{"children":["down [4, 3, 2, 1]"]}],"を計算するとき、",["$","code","3",{"children":["down [3, 2, 1]"]}],"はすでに計算されており、それを「前回の計算」で保存し、後で使用する方法が必要だからです。"]}],["$","p",null,{"children":["関数型プログラミングコミュニティでは、この種の問題に対する解決方法が既に存在します："," ","scan"," ","theorem."]}],["$","p",null,{"children":["Scan"," ","theoremは以下を指します"]}],["$","$L1a","87",{"className":"haskell","children":["map (foldl op a) . inits = scanl op a"]}],["$","p",null,{"children":["同様に"]}],["$","$L1a","89",{"className":"haskell","children":["map (foldr op a) . tails = scanr op a"]}],["$","p",null,{"children":["この定理を利用して、以下にプログラムの計算過程を示します。注意、問題を避けるために、以下を定義しました"]}],["$","$L1a","91",{"className":"haskell","children":["tails' = filter (not . null) . tails"]}],["$","$L1a","92",{"className":"haskell","children":["downs = { definition }\n        drop 1 . map down . tails'\n      = { definition }\n        drop 1 . map (all (uncurry (>=)) . dup) . tails'\n      = { map distributivity }\n        drop 1 . map (all (uncurry (>=))) . map dup . tails'\n      = { need another proof (1) }\n        drop 1 . map (all (uncurry (>=))) . tails . dup\n      = { definition }\n        drop 1 . map (foldr (&&) True . map (uncurry (>=))) . tails . dup\n      = { fold-map fusion }\n        drop 1 . map (foldr join True) . tails . dup\n      = { scan theorem }\n        drop 1 . scanr join True . dup\n          where join (x, x1) r = x >= x1 && r"]}],["$","ol","93",{"children":[["$","li","0",{"children":["新たな証明が必要で、それは以下のコードが等価であることを示しています："]}]]}],["$","$L1a","94",{"className":"haskell","children":["> map dup $ tails' [4, 2, 3, 1]\n[[(4,2),(2,3),(3,1)],[(2,3),(3,1)],[(3,1)],[]]\n\n> tails $ dup [4, 2, 3, 1]\n[[(4,2),(2,3),(3,1)],[(2,3),(3,1)],[(3,1)],[]]"]}],["$","p",null,{"children":["証明は省略します。"]}],["$","h3",null,{"className":"text-2xl","id":"結論","children":[["$","$L17",null,{"href":"#結論","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["結論"]}]]]}],["$","p",null,{"children":["上記の議論を組み合わせることで、効率的な関数型実装を以下に示します："]}],["$","$L1a","98",{"className":"haskell","children":["tick x xs = build l r x\n    where (l, r) = span (> x) xs\n          build [] r x = reverse (x:r)\n          build l  r x = last l : reverse (init l ++ [x] ++ r)\n\ndup xs = zip xs (tail xs)\ndowns = scanr (\\(x, x1) r -> (x >= x1) && r) True . dup\n\nnext xs = l ++ tick (head r) (tail r)\n    where (l, r) = splitAt (n - 1) xs\n          n = length $ takeWhile not $ downs xs"]}],["$","p",null,{"children":["これは",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}],"時間の複雑度です。しかし、私たちの定数は命令型プログラムよりも確かに大きいかもしれません。理論的には、前節で定義した",["$","code","1",{"children":["nextDown"]}],"関数の実装の方が効率的かもしれません（",["$","code","2",{"children":["length"]}],"と",["$","code","3",{"children":["splitAt"]}],"を避ける）、しかし、私は本節で示した実装の方がより明確だと思います。"]}],["$","p",null,{"children":["私は等価なScalaコードをleetcodeに提出しました："]}],["$","$L1a","101",{"className":"scala","children":["object Solution {\n    def nextPermutation(nums: Array[Int]): Unit = {\n        val nextNums = next(nums.toList).toArray\n        for (i <- nums.indices) {\n            nums(i) = nextNums(i)\n        }\n    }\n\n    def dup(xs: List[Int]): List[(Int, Int)] = xs zip xs.drop(1)\n\n    def tick(x: Int, xs: List[Int]): List[Int] = {\n        val (l, r) = xs.span(_ > x)\n        if (l.isEmpty) r.reverse ++ List(x)\n        else l.last :: (l.init ++ List(x) ++ r).reverse\n    }\n\n    def tailsDown(xs: List[(Int, Int)]): List[Boolean] = \n        xs.scanRight(true) { case ((x, x1), r) => (x >= x1) && r }\n\n    def next(xs: List[Int]): List[Int] = {\n        val n = tailsDown(dup(xs)).takeWhile(!_).length\n        val (l, r) = xs.splitAt(n - 1)\n        l ++ tick(r.head, r.tail)\n    }\n}"]}],["$","p",null,{"children":["「次の順列」問題は、命令型プログラムが関数型プログラムよりも簡潔になる数少ない問題の一つです。実際、Haskellの",["$","a","0",{"href":"https://hackage.haskell.org/package/permutation-0.5.0.5/docs/Data-Permute.html","children":["Data.Permute"]}],"ライブラリも、命令型の方法を使用しています。"]}],["$","p",null,{"children":["命令型プログラムでは、上記のアルゴリズムは以下の2つのプロセスとして説明できます："]}],["$","ol","104",{"children":[["$","li","0",{"children":["右から左に走査し、最も長い降順列",["$","code","0",{"children":["a[i ... (len - 1)]"]}],"を見つける"]}],["$","li","1",{"children":["計算を行う、",["$","ul","0",{"children":[["$","li","0",{"children":[["$","code","0",{"children":["i = 0"]}],"の場合、配列を反転する"]}],["$","li","1",{"children":["それ以外の場合、",["$","code","0",{"children":["j ∈ [i, (len - 1)]"]}],"を見つける、そのような",["$","ul","1",{"children":[["$","li","0",{"children":[["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$1b"}}]]}],["$","li","1",{"children":[["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$1c"}}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i - 1, j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>"}}]," ","を交換し、",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>…</mo><mo stretchy=\"false\">(</mo><mtext>len - 1</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i \\dots (\\text{len - 1})]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">len - 1</span></span><span class=\"mclose\">)]</span></span></span></span>"}}]," ","を反転する"]}]]}]]}]]}]]}]]}],["$","p",null,{"children":["上記の関数型アルゴリズムを完全に理解している読者にとっては、この命令型アルゴリズムは非常に直感的のはずです。しかし、このアルゴリズムをそのままあなたに提示し、理解できるでしょうか？"]}],["$","p",null,{"children":["それでは、Pythonのプログラムで今日の話を締めくくりましょう！"]}],["$","$L1a","107",{"className":"python","children":["def swap(a, i, j):\n    tmp = a[i]\n    a[i] = a[j]\n    a[j] = tmp\n\ndef rev(a, start, end):\n    l = end - start\n    for i in range(start, start + l // 2):\n        swap(a, i, end - (i - start) - 1)\n\ndef solve(a):\n    for i in range(len(a) - 1, -1, -1):\n        if i >= 1 and a[i - 1] < a[i]:\n            break\n    if i == 0:\n        rev(a, 0, len(a))\n    else:\n        j = len(a) - 1\n        while j >= i and a[j] <= a[i - 1]:\n            j -= 1\n        swap(a, i - 1, j)\n        rev(a, i, len(a))"]}],["$","div",null,{"className":"notes","children":[["$","$L1d",null,{"itemId":"1","id":"note-1","children":[["$","p",null,{"children":["私は、関係的プログラム計算がこの問題に適用可能かどうかは不明である"]}]]}],["$","$L1d",null,{"itemId":"2","id":"note-2","children":[["$","p",null,{"children":["注意:これは正確な説明ではない、Haskellは遅延評価であり、評価プロセスは慎重に分析する必要がある"]}]]}]]}]]}]]}]]}]
