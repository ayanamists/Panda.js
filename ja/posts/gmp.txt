3:I[78703,[],""]
6:I[53751,[],""]
7:I[59576,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"Providers"]
4:["locale","ja","d"]
5:["slug","gmp","d"]
0:["qtmez-VgEwHMuaaGGpdGk",[[["",{"children":[["locale","ja","d"],{"children":["posts",{"children":[["slug","gmp","d"],{"children":["__PAGE__?{\"locale\":\"ja\",\"slug\":\"gmp\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":[["locale","ja","d"],{"children":["posts",{"children":[["slug","gmp","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},[["$","div",null,{"className":" relative w-full py-12 shadow-xl shadow-slate-700/20 ring-1 ring-gray-900/5 dark:shadow-slate-100/20 dark:ring-gray-100/5 lg:mx-auto lg:max-w-4xl lg:pt-16 lg:pb-28","children":["$","div",null,{"className":"prose prose-natural dark:prose-invert mx-auto max-w-full px-8 sm:px-16 relative","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","posts","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d0ab39c2387d2115.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]}],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ja","suppressHydrationWarning":true,"children":["$","body",null,{"className":"text-foreground bg-background min-h-screen","children":["$","$L7",null,{"children":["$L8",["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]}]}]}],null],null]},[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c6bd041446e6519a.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ad2762ca96cee671.css","precedence":"next","crossOrigin":"$undefined"}]]}],null],null],[null,"$L9"]]]]
a:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"Navbar"]
b:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"NavbarBrand"]
d:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"NavbarItem"]
10:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"NavbarContent"]
11:I[81946,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"default"]
12:I[48125,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"default"]
8:["$","$La",null,{"shouldHideOnScroll":true,"children":[["$","$Lb",null,{"className":"flex flex-row gap-4","children":[["$","p",null,{"className":"font-bold text-inherit","children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],["$","$Ld",null,{"children":"$Lf"}]]}],["$","$L10",null,{"justify":"end","className":"gap-1","children":[["$","$Ld",null,{"children":["$","$L11",null,{}]}],["$","$Ld",null,{"children":["$","$L12",null,{}]}]]}]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Aya's Blog"}],["$","meta","3",{"name":"description","content":"A site powered by next.js and pandoc"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
13:I[9678,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"default"]
c:["$","$L13",null,{"locale":"ja","localePrefix":"always","href":"/","aria-label":"ホーム","children":"ホーム"}]
e:["$","$L13",null,{"locale":"ja","localePrefix":"always","href":"/blog/","className":"font-bold","aria-label":"ブログ","children":"ブログ"}]
f:["$","$L13",null,{"locale":"ja","localePrefix":"always","href":"/favorites/","className":"font-bold","aria-label":"心の庭","children":"心の庭"}]
14:"$Sreact.fragment"
15:I[75164,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","861","static/chunks/861-2893a7c032654c11.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-adf657eca4f78e61.js"],"default"]
16:I[37006,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","861","static/chunks/861-2893a7c032654c11.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-adf657eca4f78e61.js"],"default"]
17:I[65469,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","861","static/chunks/861-2893a7c032654c11.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-adf657eca4f78e61.js"],""]
18:I[39926,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","861","static/chunks/861-2893a7c032654c11.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-adf657eca4f78e61.js"],"default"]
19:T5a9,/* 修改这个宏，使得加法有右值引用的版本 */
#define __GMPP_DEFINE_BINARY_FUNCTION(fun, eval_fun)                   \
                                                                       \
template <class T, class U, class V, class W>                          \
inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,       \
__gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> >      \
fun(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2)      \
{                                                                      \
  return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,     \
     __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> > \
    (expr1, expr2);                                                    \
}                                                                      \
template <class T, class U, class V, class W>                          \
inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,       \
__gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> >      \
fun(__gmp_expr<T, U> &&expr1, __gmp_expr<V, W> &&expr2)                \
{                                                                      \
  return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,     \
     __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> > \
    (std::move(expr1), std::move(expr2));                              \
}2:["$","div",null,{"children":[["$","h1",null,{"className":"text-4xl font-bold mb-2","children":"中程度の罠 – GMPのC++バインディング"}],["$","div",null,{"className":"text-sm text-gray-500 mb-5","children":"12/21/2020"}],["$","$14","0",{"children":[["$","$L15",null,{"children":[["$","ul","0",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"#gnu-mpライブラリのcバインディング","id":"toc-gnu-mpライブラリのcバインディング","children":["GNU"," ","MPライブラリのC++バインディング"]}]]}],["$","li","1",{"children":[["$","a","0",{"href":"#奇妙な問題","id":"toc-奇妙な問題","children":["奇妙な問題"]}]]}],["$","li","2",{"children":[["$","a","0",{"href":"#gnu-mpライブラリの設計","id":"toc-gnu-mpライブラリの設計","children":["GNU"," ","MPライブラリの設計"]}]]}],["$","li","3",{"children":[["$","a","0",{"href":"#問題の解決","id":"toc-問題の解決","children":["問題の解決"]}]]}],["$","li","4",{"children":[["$","a","0",{"href":"#gcとraii","id":"toc-gcとraii","children":["GCとRAII"]}]]}]]}]]}],["$","article","1",{"children":[["$","$L16",null,{"type":"warning","children":[["$","p",null,{"children":["この記事はChatGPTによって中国語から翻訳されたもので、いくつかの誤りが含まれているかもしれません。不正確な部分があればご了承ください。"]}]]}],["$","h2",null,{"className":"text-3xl","id":"gnu-mpライブラリのcバインディング","children":[["$","$L17",null,{"href":"#gnu-mpライブラリのcバインディング","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["GNU"," ","MPライブラリのC++バインディング"]]}],["$","p",null,{"children":["GNU"," ","MPライブラリは、大きな整数と多精度浮動小数点数の計算ライブラリです。それ自体はC言語で書かれていますが、C++バインディングも提供しています。C++でプログラムを書くとき、あなたが自己虐待狂や手動コンパイラ変換の熱狂的な愛好家でないなら、C++バインディングを使うことは間違いなく良い選択です。"]}],["$","p",null,{"children":["これは、C言語バージョンのバインディングがすべての操作をアセンブリ言語の命令のようにカプセル化しているからです。例えば、大きな整数バージョンの"," ",["$","code","0",{"children":["1+2"]}]," ","を計算したい場合、次のように書くべきです："]}],["$","$L18","4",{"className":"c","children":["mpz_t a, b, c;\nmpz_init_set_ui(a, 1);\nmpz_init_set_ui(b, 2);\nmpz_add(c, a, b);\nmpz_clear(a);\nmpz_clear(b);\nmpz_clear(c);"]}],["$","p",null,{"children":["正直に言うと、これは直接アセンブリを書くよりも簡潔ではありません："]}],["$","$L18","6",{"className":"asm","children":["mov $1, %eax\nmov $2, %ebx\nadd %ebx, %eax\nmov %ecx, %eax"]}],["$","p",null,{"children":["この状況の根本的な原因は、C言語にはメモリリソース管理や高速構造構築の便利な手段がない（もちろん、新しい標準にはいくつかある）ため、C言語は",["$","em","0",{"children":["式評価モデル"]}],"を実装することができますが、",["$","em","1",{"children":["カスタム型の式評価モデル"]}],"を便利に実装することはできません。"]}],["$","p",null,{"children":["式評価モデルとレジスタマシンモデルの間の変換はコンパイルの本質であり、このようにC言語でコードを書くことは、部分的にコンパイラが行う変換（例えばANF）を自分で行うことに相当します。だから、このようにコードを書くのが好きな人は、アセンブリを書くのが好きな人か、手動でコンパイラ変換を行うのが好きな人です。"]}],["$","p",null,{"children":["C++バインディングはこの時点で救世主となり、C/C++を使用しなければならない場合（例えば私たちの学校の「現代暗号学実験」のコース）、C++バインディングを使用することでこのような困難を避けることができます："]}],["$","$L18","10",{"className":"cpp","children":["const mpz_class a {1}, b {2};\nconst auto c = a + b;"]}],["$","p",null,{"children":["このコードは、上記のC言語コードと",["$","strong","0",{"children":["完全に同じ"]}],"動作を実行します。これは、C++がCに比べていくつかの優れた特性を持っているためで、その中でも最も優れているのはRAII、つまり",["$","strong","1",{"children":["R"]}],"esource"," ",["$","strong","2",{"children":["A"]}],"cquisition"," ",["$","strong","3",{"children":["I"]}],"s"," ",["$","strong","4",{"children":["I"]}],"nitialization、リソースの取得は初期化です。ここでは、実行スタックと一緒に動作し、簡単に言えば、コンストラクタとデストラクタの組み合わせにより、スタック上のオブジェクトが構築されるとき（手動でバインディングを導入するとき）リソースを取得し、破棄されるとき（現在のスコープを退出するときに自動的に破棄される）リソースを解放します。メモリというリソースに対しては、これにより我々は『GCのある言語』を使用しているかのように、どんなメモリ問題も気にせずに済むようになります。"]}],["$","p",null,{"children":["自然に生じる一つの問題は、スタック型RAIIが本当にGCを置き換えることができるのかということです。以下のGMPの説明を通じて、読者の皆さんが自分自身の答えを出すことができるでしょう。"]}],["$","h2",null,{"className":"text-3xl","id":"奇妙な問題","children":[["$","$L17",null,{"href":"#奇妙な問題","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["奇妙な問題"]]}],["$","p",null,{"children":["既に述べたように、私がGNU"," ","MPライブラリを使用する主な目的は暗号学の実験を行うためです。私たちの暗号学の実験では、DLP（離散対数）の計算問題があり、その規模は非常に大きく、実行速度は重要な要素です。そのため、私は速度が保証されているGNU"," ","MPのようなライブラリを使用しなければなりません。しかし、実験中に、私は非常に奇妙な問題に遭遇しました。それは、時々一部のコードが頻繁に不正確な結果を出すというもので、私が何度もコードをチェックしても問題の原因を見つけることができませんでした。さらに深刻なのは、これらの問題が幽霊のように、時々現れたり消えたりし、現れたときの結果が時々",["$","em","0",{"children":["異なる"]}],"ということです。"]}],["$","p",null,{"children":["これに対して、私の最初の反応は何かメモリの問題があるのではないかということでした。しかし、私はすぐにこの考えを否定しました。GNU"," ","MPのような多くの人々に使用されているライブラリは、一般的にはこのような悪性の問題を起こすことはありません。しかし、私のコードには単純な計算しか含まれていませんでした。例えば："]}],["$","$L18","16",{"className":"cpp","children":["/*\n * Pohlig-Hellman algorithm for Group of prime power order\n */\nmpz_class\npohligHellmanP(const mpz_class& g, const mpz_class& h,\n               const mpz_class& pn, const mpz_class& en,\n               const mpz_class& p) {\n    const auto y = fastPow(g, Pow(pn, en - 1), p);\n    assert (fastPow(y, pn, p) == 1);\n    mpz_class x{0};\n    for (auto i = 0; i < en; ++i) {\n        auto hi = fastPow(Inverse(fastPow(g, x, p), p) * h,\n                          Pow(pn, en - 1 - i), p);\n        auto di = pDlp(y, hi, pn, p);\n        x = x + Pow(pn, i) * di;\n    }\n    return x;\n}"]}],["$","p",null,{"children":["一連の困難な探求の後、私は『最小問題構造』を確定しました。『最小問題構造』とは、この問題を引き起こす最も単純で、行数が最も少ないコードを指します。それは次のようなものです："]}],["$","$L18","18",{"className":"cpp","children":["mpz_class nothing() {\n  const auto a = mpz_class { 1 } + mpz_class { 2 };\n  std::cout << a << std::endl;\n  return a;\n}\n\nint main() {\n  std::cout << nothing();\n}"]}],["$","p",null,{"children":["私のコンピュータ上では、このコードは非常に驚くべき結果を出します："]}],["$","$L18","20",{"className":"shell","children":["➜  gmp_error git:(master) ✗ g++ test.cpp -o a -g -lgmp -O0 -lgmpxx\n➜  gmp_error git:(master) ✗ ./a                                   \n94361021124304\n94361021124336%"]}],["$","p",null,{"children":[["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>94361021124304</mn></mrow><annotation encoding=\"application/x-tex\">1+2=94361021124304</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">94361021124304</span></span></span></span>"}}],"、それとも"," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>94361021124336</mn></mrow><annotation encoding=\"application/x-tex\">1+2=94361021124336</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">94361021124336</span></span></span></span>"}}],"？"]}],["$","p",null,{"children":["これほど単純なコードがこれほど奇妙なエラーを生じさせるなんて、本当に奇妙です！"]}],["$","h2",null,{"className":"text-3xl","id":"gnu-mpライブラリの設計","children":[["$","$L17",null,{"href":"#gnu-mpライブラリの設計","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["GNU"," ","MPライブラリの設計"]]}],["$","p",null,{"children":["この謎を解くためには、別の奇妙な現象から手をつけるべきです。それは次のようなものです："]}],["$","$L18","25",{"className":"cpp","children":["mpz_class nothing() {\n  const mpz_class a = mpz_class { 1 } + mpz_class { 2 };\n  std::cout << a << std::endl;\n  return a;\n}\n\nint main() {\n  std::cout << nothing();\n}"]}],["$","p",null,{"children":["このコードは全く問題がない？読者の皆さんはこの事実を信じるのが難しいかもしれませんが、それは現実です："]}],["$","$L18","27",{"className":"shell","children":["➜  gmp_error git:(master) ✗ g++ test.cpp -o a -g -lgmp -O0 -lgmpxx\n➜  gmp_error git:(master) ✗ ./a                                   \n3\n3%"]}],["$","p",null,{"children":["それにより問題は明確になります。",["$","code","0",{"children":["auto"]}],"というキーワードは",["$","code","1",{"children":["a"]}],"を何の型に推論するのでしょうか？IDEやc++filtで確認すると、答えはますます混乱します："]}],["$","$L18","29",{"className":"cpp","children":["const __gmp_expr<mpz_t, __gmp_binary_expr<mpz_class, mpz_class, __gmp_binary_plus>> a"]}],["$","p",null,{"children":["この型は何ですか？答えを見つけるためには",["$","code","0",{"children":["gmpxx.h"]}],"というファイルを見る必要があるようです。"]}],["$","p",null,{"children":[["$","code","0",{"children":["gmpxx.h"]}],"を見ると、",["$","code","1",{"children":["mpz_class"]}],"は実際には",["$","code","2",{"children":["mpz_expr<mpz_t, mpz_t>"]}],"であることがわかります："]}],["$","$L18","32",{"className":"cpp","children":["/**************** mpz_class -- wrapper for mpz_t ****************/\n\ntemplate <> // line 1572\nclass __gmp_expr<mpz_t, mpz_t>{ ... }; \n\ntypedef __gmp_expr<mpz_t, mpz_t> mpz_class; // line 1756"]}],["$","p",null,{"children":["では、この",["$","code","0",{"children":["__gmp_expr"]}],"という高階型（理論的には確かに高階型に相当します）は他にも特化があるのでしょうか？確かに、このファイルには",["$","code","1",{"children":["__gmp_expr"]}],"の多くの特化が定義されています。例えば、先ほど見た",["$","code","2",{"children":["a"]}],"の実際の型は以下のようになります："]}],["$","$L18","34",{"className":"cpp","children":["template <class T, class Op>\nclass __gmp_expr\n<T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, T>, Op> >"]}],["$","p",null,{"children":["このクラスのコンストラクタを見てみましょう："]}],["$","$L18","36",{"className":"cpp","children":["__gmp_expr(const val1_type &val1, const val2_type &val2)\n    : expr(val1, val2) { }"]}],["$","p",null,{"children":[["$","code","0",{"children":["expr"]}],"はクラスのメンバ変数で、以下のように宣言されています："]}],["$","$L18","38",{"className":"cpp","children":["__gmp_binary_expr<val1_type, val2_type, Op> expr;"]}],["$","p",null,{"children":["この",["$","code","0",{"children":["__gmp_binary_expr"]}],"とは何者なのでしょうか？その定義は以下の通りです："]}],["$","$L18","40",{"className":"cpp","children":["template <class T, class U, class Op>\nstruct __gmp_binary_expr\n{\n  typename __gmp_resolve_ref<T>::ref_type val1;\n  typename __gmp_resolve_ref<U>::ref_type val2;\n\n  __gmp_binary_expr(const T &v1, const U &v2) : val1(v1), val2(v2) { }\nprivate:\n  __gmp_binary_expr();\n};"]}],["$","p",null,{"children":["これは少し混乱を招くかもしれません。このようなコンストラクタしか持たないクラスを定義する特別な意味は何でしょうか？それを使用する関数を見つける必要があります。以前に述べたように、右辺の型が",["$","code","0",{"children":["mpz_class"]}],"であれば問題は発生しません。",["$","code","1",{"children":["mpz_expr<..>"]}],"から",["$","code","2",{"children":["mpz_class"]}],"になるとき、型変換が行われています。この型変換関数はどこにあるのでしょうか？再び",["$","code","3",{"children":["mpz_class"]}],"の定義に戻ります："]}],["$","$L18","42",{"className":"cpp","children":["template <class T>\n__gmp_expr(const __gmp_expr<mpz_t, T> &expr)\n{ mpz_init(mp); __gmp_set_expr(mp, expr); }\ntemplate <class T, class U>\nexplicit __gmp_expr(const __gmp_expr<T, U> &expr)\n{ mpz_init(mp); __gmp_set_expr(mp, expr); }"]}],["$","p",null,{"children":["この関数は間違いなく",["$","code","0",{"children":["__gmp_expr<...>"]}],"を",["$","code","1",{"children":["mpz_class"]}],"に変換しています。では、",["$","code","2",{"children":["__gmp_set_expr"]}],"は何をしているのでしょうか？"]}],["$","p",null,{"children":["その定義を見てみましょう："]}],["$","$L18","45",{"className":"cpp","children":["template <class T>\ninline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpz_t, T> &expr)\n{\n  expr.eval(z);\n}"]}],["$","p",null,{"children":["え？この",["$","code","0",{"children":["eval"]}],"関数は",["$","code","1",{"children":["__gmp_expr<T ...>"]}],"で定義されているようです、先ほどの定義を再度確認してみましょう："]}],["$","$L18","47",{"className":"cpp","children":["void eval(typename __gmp_resolve_expr<T>::ptr_type p) const\n{ Op::eval(p, expr.val1.__get_mp(), expr.val2.__get_mp()); }"]}],["$","p",null,{"children":["これは",["$","code","0",{"children":["Op::eval"]}],"関数に転送されています。以前の型の",["$","code","1",{"children":["Op"]}],"は",["$","code","2",{"children":["__gmp_binary_plus"]}],"で、その",["$","code","3",{"children":["eval"]}],"関数はどのように定義されているのでしょうか？"]}],["$","$L18","49",{"className":"cpp","children":["struct __gmp_binary_plus\n{\n  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)\n  { mpz_add(z, w, v); }"]}],["$","p",null,{"children":["これは非常に親切で、ついにこの一連のコンボが何をしているのかを理解しました。"]}],["$","p",null,{"children":["まず、",["$","code","0",{"children":["__gmp_expr< ... >"]}],"は構文木のようなもので、すべての操作情報を記録しています。この型の値が",["$","code","1",{"children":["mpz_class"]}],"に変換されるとき、評価が行われ、評価後の値が変換後のバインドに格納されます。"]}],["$","p",null,{"children":["しかし、これが何を意味するのでしょうか？私の見解では、このようなコードはロジックを何も簡略化していません。C++コンパイラは余分なコピーを生成しないことを完全に保証できます。実際、このように複雑な構造と直接クラスを書いて演算子をオーバーロードする効果はほぼ同じです。"]}],["$","p",null,{"children":["唯一の利点は、変数が",["$","code","0",{"children":["auto"]}],"を使用している場合、変数自体が値ではなく構文木であり、その式の値が必要になる（つまり型変換が行われる）まで評価されないことです。これはいわゆる「遅延評価」です。"]}],["$","p",null,{"children":["数値計算タスクで遅延評価を行う利点が何なのか、私には理解できません。遅延評価の最大の利点は、不必要な値を計算しないことです。例えば："]}],["$","$L18","55",{"className":"scheme","children":["(define (f) (f))\n(define (g t1 t2) (t2))\n\n(g (f) 1) ;schemeでは、無限ループ"]}],["$","$L18","56",{"className":"haskell","children":["f = f\ng t1 t2 = t2\ng f 1 --haskellでは、これは 1 を返します"]}],["$","p",null,{"children":["しかし、このような数値計算タスクでは、通常は余計な計算は行わない。遅延評価自体は必要な計算を簡略化できず、パフォーマンス上の利点はありません。"]}],["$","p",null,{"children":["さらに、この設計は先ほどの深刻なエラーを引き起こします。これは、各",["$","code","0",{"children":["__gmp_binary_expr"]}],"が実際に保存しているのは2つの変数の",["$","code","1",{"children":["const"]}],"参照であり、基本的に",["$","code","2",{"children":["const"]}],"参照は右辺値をキャプチャできないからです。呼び出し"]}],["$","$L18","59",{"className":"cpp","children":["__gmp_binary_expr(const T &v1, const U &v2) : val1(v1), val2(v2) { }"]}],["$","p",null,{"children":["は、",["$","code","0",{"children":["v1"]}],"へのポインタを",["$","code","1",{"children":["val1"]}],"に、",["$","code","2",{"children":["v2"]}],"へのポインタを",["$","code","3",{"children":["val2"]}],"に割り当てるだけです。"]}],["$","p",null,{"children":["このコードを再度見てみましょう："]}],["$","$L18","62",{"className":"cpp","children":["const auto a = mpz_class { 1 } + mpz_class { 2 };\n..."]}],["$","p",null,{"children":["実際には次のようになります："]}],["$","$L18","64",{"className":"cpp","children":["mpz_class temp1 {1}, temp2 {2};\na = temp1 + temp2;\n~temp1(); ~temp2();\n..."]}],["$","p",null,{"children":["デストラクタが実行された後、",["$","code","0",{"children":["a"]}],"の構文木のノードが指す対象は完全にデストラクトされ、これらのオブジェクトにアクセスするコードはすべてエラーです。言い換えれば、",["$","code","1",{"children":["a"]}],"が有効なのは現在の文が完了し、次の文がまだ実行されていない瞬間だけです。"]}],["$","h2",null,{"className":"text-3xl","id":"問題の解決","children":[["$","$L17",null,{"href":"#問題の解決","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["問題の解決"]]}],["$","p",null,{"children":["問題を解決するには2つの方法があります："]}],["$","ul","68",{"children":[["$","li","0",{"children":[["$","code","0",{"children":["gmpxx.h"]}],"を修正する。"]}],["$","li","1",{"children":["すべての宣言を",["$","code","0",{"children":["mpz_class"]}],"で行い、",["$","code","1",{"children":["auto"]}],"を使用しない。"]}]]}],["$","p",null,{"children":["しかし、このファイルを修正しても、",["$","code","0",{"children":["const&"]}],"が右辺値をキャプチャできない問題は依然として解決できません。"]}],["$","p",null,{"children":[["$","code","0",{"children":["__gmp_binary_expr"]}],"を値セマンティクスに変更するのはどうでしょうか？つまり、",["$","code","1",{"children":["val1"]}],"と",["$","code","2",{"children":["val2"]}],"を",["$","code","3",{"children":["const &T"]}],"と",["$","code","4",{"children":["const &U"]}],"ではなく、実際の",["$","code","5",{"children":["T"]}],"と",["$","code","6",{"children":["U"]}],"にするということです。"]}],["$","p",null,{"children":["これは"," ",["$","code","0",{"children":["const auto a = mpz_class { 1 } + mpz_class { 2 };"]}]," ","の問題を痛みなく解決できます。なぜなら、",["$","code","1",{"children":["mpz_class{1}"]}],"と",["$","code","2",{"children":["mpz_class{2}"]}],"はどちらも「右値」、つまり「X値」で、「右値参照」によってリソースを痛みなく引き継ぐことができるからです。実際、加法の問題を解決するだけなら、いくつかの箇所を修正するだけで済みます："]}],["$","$L18","72",{"className":"cpp","children":["$19"]}],["$","$L18","73",{"className":"cpp","children":["/* 修改这个类，使得构造函数有右值引用的版本 */\ntemplate <class T, class Op>\nclass __gmp_expr\n<T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, T>, Op> >\n{\nprivate:\n  typedef __gmp_expr<T, T> val1_type;\n  typedef __gmp_expr<T, T> val2_type;\n\n  __gmp_binary_expr<val1_type, val2_type, Op> expr;\npublic:\n  __gmp_expr(const val1_type &val1, const val2_type &val2)\n    : expr(val1, val2) { } \n  __gmp_expr(val1_type &&val1, val2_type &&val2) // 新加入的构造函数\n    : expr(std::move(val1), std::move(val2)) { }"]}],["$","$L18","74",{"className":"cpp","children":["template <class Op>\nstruct __gmp_binary_expr<mpz_class, mpz_class, Op>\n{\n  mpz_class val1;\n  mpz_class val2;\n  __gmp_binary_expr(const mpz_class &v1, const mpz_class &v2) \n    : val1(v1), val2(v2) { }\n  __gmp_binary_expr(mpz_class &&v1, mpz_class &&v2) \n    : val1(std::move(v1)), val2(std::move(v2)) { }\nprivate:\n  __gmp_binary_expr();\n};"]}],["$","p",null,{"children":[["$","code","0",{"children":["__gmp_binary_expr"]}],"の特化を自分で定義し、両方が",["$","code","1",{"children":["mpz_class"]}],"の場合を処理します。"]}],["$","p",null,{"children":["これにより、上記のコードは正しく",["$","code","0",{"children":["3"]}],"を得ることができます。"]}],["$","p",null,{"children":["しかし、修正が完了するまでの作業量はさておき、このように修正すると必ず一つの問題に直面します：",["$","em","0",{"children":["左値が渡された場合、痛みなく移動することはできず、コピーを行う必要があり、これはパフォーマンスにとって不利です"]}],"。"]}],["$","p",null,{"children":["この問題をどのように解決するのでしょうか？答えは（少なくとも私には）解決できません。"]}],["$","h2",null,{"className":"text-3xl","id":"gcとraii","children":[["$","$L17",null,{"href":"#gcとraii","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["GCとRAII"]]}],["$","p",null,{"children":["上記の問題は、GCがある言語では、簡単に言えば問題ではありません。たとえばPythonのような言語では、リソースのバインドを繰り返しても、コピーは発生しません："]}],["$","$L18","81",{"className":"python","children":["a = [1, 2, 3, 4]\nb = a\nc = b"]}],["$","p",null,{"children":["もちろん、これは",["$","code","0",{"children":["a"]}],"、",["$","code","1",{"children":["b"]}],"、",["$","code","2",{"children":["c"]}],"が実際には同じオブジェクトを指しているためで、",["$","code","3",{"children":["const &"]}],"のようなものです。"]}],["$","p",null,{"children":["しかし、GCがある言語では、",["$","code","0",{"children":["const &"]}],"は「右値をキャプチャできない」という問題を完全に解決できます："]}],["$","$L18","84",{"className":"python","children":["class A:\n    def __init__(self, arr):\n        self.arr = arr\n        \na = A([1,2,3,4])"]}],["$","p",null,{"children":["根本的には、RAIIでは同じスタック上のオブジェクトを2つのバインドが同時に「所有」することはできず、スタック上のオブジェクトが消去されるルールは厳格なスコープルールであり、「スタックからオブジェクトを借りる」という状況は発生しません。一方、GCがある言語では、「オブジェクト」と「オブジェクトが所有するリソース」が堆上にあり、さらに一体化しているため、この問題は発生しません。"]}],["$","p",null,{"children":["このように見ると、RAIIはGCを置き換えることはできません。もちろん、Rustなどの言語では、他の方法でこの問題を解決できるかもしれません。しかし、結論として、C++では、RAIIの能力は結局のところ限定的です。"]}],["$","div",null,{"className":"notes","children":"$undefined"}]]}]]}]]}]
