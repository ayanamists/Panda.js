3:I[78703,[],""]
6:I[53751,[],""]
7:I[59576,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"Providers"]
4:["locale","zh-cn","d"]
5:["slug","fp-lc100-001-permutation","d"]
0:["jbu7YAOW93v--hWvjWsRb",[[["",{"children":[["locale","zh-cn","d"],{"children":["posts",{"children":[["slug","fp-lc100-001-permutation","d"],{"children":["__PAGE__?{\"locale\":\"zh-cn\",\"slug\":\"fp-lc100-001-permutation\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":[["locale","zh-cn","d"],{"children":["posts",{"children":[["slug","fp-lc100-001-permutation","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},[["$","div",null,{"className":" relative w-full py-12 shadow-xl shadow-slate-700/20 ring-1 ring-gray-900/5 dark:shadow-slate-100/20 dark:ring-gray-100/5 lg:mx-auto lg:max-w-4xl lg:pt-16 lg:pb-28 bg-lightwhite dark:bg-lightblack","children":["$","div",null,{"className":"prose prose-natural dark:prose-invert mx-auto max-w-full px-8 sm:px-16 relative","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","posts","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97d548e729a05adf.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]}],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh-cn","suppressHydrationWarning":true,"children":["$","body",null,{"className":"text-foreground bg-background min-h-screen","children":["$","$L7",null,{"children":["$L8",["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]}]}]}],null],null]},[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/57e8d276a38ab64c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ad2762ca96cee671.css","precedence":"next","crossOrigin":"$undefined"}]]}],null],null],[null,"$L9"]]]]
a:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"Navbar"]
b:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"NavbarBrand"]
d:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"NavbarItem"]
10:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"NavbarContent"]
11:I[81946,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"default"]
12:I[48125,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"default"]
8:["$","$La",null,{"shouldHideOnScroll":true,"children":[["$","$Lb",null,{"className":"flex flex-row gap-4","children":[["$","p",null,{"className":"font-bold text-inherit","children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],["$","$Ld",null,{"children":"$Lf"}]]}],["$","$L10",null,{"justify":"end","className":"gap-1","children":[["$","$Ld",null,{"children":["$","$L11",null,{}]}],["$","$Ld",null,{"children":["$","$L12",null,{}]}]]}]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Aya's Blog"}],["$","meta","3",{"name":"description","content":"A site powered by next.js and pandoc"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
13:I[9678,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-3df2a5079cf0a3bb.js"],"default"]
c:["$","$L13",null,{"locale":"zh-cn","localePrefix":"always","href":"/","aria-label":"主页","children":"主页"}]
e:["$","$L13",null,{"locale":"zh-cn","localePrefix":"always","href":"/blog/","className":"font-bold","aria-label":"博客","children":"博客"}]
f:["$","$L13",null,{"locale":"zh-cn","localePrefix":"always","href":"/favorites/","className":"font-bold","aria-label":"园地","children":"园地"}]
14:"$Sreact.fragment"
15:I[75164,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],"default"]
16:I[65469,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],""]
19:I[39926,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],"default"]
1d:I[27377,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-8ab52a4fba20768e.js"],"default"]
17:T1199,<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>next</mtext><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="double-struck">P</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="double-struck">P</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mo stretchy="false">{</mo><mi>m</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mo>∈</mo><mi mathvariant="double-struck">P</mi><mo separator="true">,</mo><mi>m</mi><mo>&gt;</mo><mi>a</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
\text{next}(a) = \begin{cases}
  \min(\mathbb{P}) &amp; a = \max(\mathbb{P}) \\
  \min(\{ m | m \in \mathbb{P}, m &gt; a \}) &amp; \text{otherwise}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">next</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">min</span><span class="mopen">(</span><span class="mord mathbb">P</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">min</span><span class="mopen">({</span><span class="mord mathnormal">m</span><span class="mord">∣</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbb">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mclose">})</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord mathbb">P</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">otherwise</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>18:T49d,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x) = x + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>1a:T442,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>∈</mo><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mtext>(len - 1)</mtext><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">j \in [i, \text{(len - 1)}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">(len - 1)</span></span><span class="mclose">]</span></span></span></span>1b:T557,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[j] &gt; a[i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>1c:Tb8c,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>k</mi><mo>≥</mo><mi>i</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>→</mo><mi>a</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>≥</mo><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\forall k \ge i, a[k] &gt; a[i - 1] \to a[k] \ge a[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>2:["$","div",null,{"children":[["$","h1",null,{"className":"text-4xl font-bold mb-2","children":"函数式 Leetcode 百题 – 排列"}],["$","div",null,{"className":"text-sm text-gray-500 mb-5","children":"4/24/2024"}],["$","$14","0",{"children":[["$","$L15",null,{"children":[["$","ul","0",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"#前言","id":"toc-前言","children":["前言"]}]]}],["$","li","1",{"children":[["$","a","0",{"href":"#下一个排列","id":"toc-下一个排列","children":["31."," ","下一个排列"]}],["$","ul","1",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"#题目描述","id":"toc-题目描述","children":["题目描述"]}]]}],["$","li","1",{"children":[["$","a","0",{"href":"#第一想法","id":"toc-第一想法","children":["第一想法"]}]]}],["$","li","2",{"children":[["$","a","0",{"href":"#递归","id":"toc-递归","children":["递归"]}]]}],["$","li","3",{"children":[["$","a","0",{"href":"#ismax-的定义","id":"toc-ismax-的定义","children":[["$","code","0",{"children":["isMax"]}]," ","的定义"]}]]}],["$","li","4",{"children":[["$","a","0",{"href":"#tick-的定义","id":"toc-tick-的定义","children":[["$","code","0",{"children":["tick"]}]," ","的定义"]}]]}],["$","li","5",{"children":[["$","a","0",{"href":"#更高效的代码","id":"toc-更高效的代码","children":["更高效的代码"]}]]}],["$","li","6",{"children":[["$","a","0",{"href":"#总结","id":"toc-总结","children":["总结"]}]]}]]}]]}]]}]]}],["$","article","1",{"children":[["$","h2",null,{"className":"text-3xl","id":"前言","children":[["$","$L16",null,{"href":"#前言","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["前言"]}]]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["算法题，是很多程序员的梦魇之一。算法本身当然是有趣的，但不会做题的抓狂、面试回答不出问题的窘迫，没有人会喜欢。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["应对算法题挑战的传统方式是"]}]," ",["$","strong","1",{"children":[["$","span","0",{"className":"cjk","children":["刷题"]}]]}]," ",["$","span","2",{"className":"cjk","children":["。"]}],["$","span","3",{"className":"cjk","children":["刷题，也就是做大量的题目来学习算法。很多人笃信一种理论，无论是数学学习还是算法学习，都必须进行大量的练习。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["我也认同这种理论。冯诺依曼的箴言还挂在本博客的首页上："]}]]}],["$","blockquote","4",{"children":[["$","p",null,{"children":["Young"," ","man,"," ","in"," ","mathematics"," ","you"," ","don’t"," ","understand"," ","things."," ","You"," ","just"," ","get"," ","used"," ","to"," ","them."]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["直觉的认识，直觉的经验，是无比宝贵的财富。练习是获取这种宝贵财富最可靠的手段。简而言之，想要学习算法，你必须刷题，必须练习。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["然而，我确实极度厌烦一种算法学习的常规路径。那就是看到某道题不会做，思考了"]}]," ","10"," ",["$","span","1",{"className":"cjk","children":["分钟还是不知道从何入手，那么就去寻找答案。也许你"]}]," ",["$","q","2",{"children":[["$","span","0",{"className":"cjk","children":["理解"]}]]}]," ",["$","span","3",{"className":"cjk","children":["了答案或者记住了答案，下次看到相同的题目的时候就套进去。只要你见过的答案够多，那么你能"]}]," ",["$","q","4",{"children":[["$","span","0",{"className":"cjk","children":["套"]}]]}]," ",["$","span","5",{"className":"cjk","children":["的题目也够多。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["为什么我不喜欢这种学习方法呢？也许是我不够聪明吧，我很难"]}]," ",["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["理解"]}]]}]," ",["$","span","2",{"className":"cjk","children":["别人给的答案。太多的人只是把最后的高效算法告诉你，而忽略了直觉建立的过程，更别提算法的证明了。从这些人的答案里，我既没有感受到他们对于问题的深刻理解，又没有感受到算法本身的美感。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["难道我们只能通过给"]}]," ",["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["天才"]}]]}]," ",["$","span","2",{"className":"cjk","children":["设计的教育来学习算法吗？"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["不。世界上还有一群人，在尝试着用纯函数式的语言，用等式推导的方法来设计程序。这些人同样也珍视直觉的价值。他们会从一个清晰而不高效的程序出发，一步步地给出最终的高效算法。在这个过程中，算法的美、算法的"]}]," ","insight"," ",["$","span","1",{"className":"cjk","children":["纤毫毕现。已故的"]}]," ","Richard"," ","Bird，台湾的穆信成老师都是这种方式的先驱。在他们的论文和书籍中，我感受到了一种真正的温柔。"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["我想，虽然等式推导很多时候非常困难，但是把算法的"]}]," ","non-trivial"," ",["$","span","1",{"className":"cjk","children":["之处是什么、算法的直觉是什么讲清楚，也许没有那么困难。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["本系列文章就是我的尝试。我将在这些文章中，讲解我是怎么用纯函数式编程解决"]}]," ","Leetcode"," ",["$","span","1",{"className":"cjk","children":["的。至于为什么选择"]}]," ","Leetcode"," ",["$","span","2",{"className":"cjk","children":["而不是难度更高的"]}]," ","Codeforces，我认为难度太高，也许不是好事。高难度的问题很可能需要多个算法共同来处理，而我们更想在每篇文章中关注某类具体的算法。（另一个原因是，我本人对于算法仍然是某种意义的"," ",["$","q","3",{"children":[["$","span","0",{"className":"cjk","children":["初学者"]}]]}],["$","span","4",{"className":"cjk","children":["，难度太高我也处理不来）"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["选择"]}]," ","Leetcode"," ",["$","span","1",{"className":"cjk","children":["的一个后果是，我们必须用"]}]," ","Racket"," ",["$","span","2",{"className":"cjk","children":["或者"]}]," ","Scala"," ",["$","span","3",{"className":"cjk","children":["而非"]}]," ","Haskell"," ",["$","span","4",{"className":"cjk","children":["来提交代码。这有时候会造成一些困扰，不过我的经验是，大部分我给出的"]}]," ","Haskell"," ",["$","span","5",{"className":"cjk","children":["代码可以直接翻译到"]}]," ","Scala"," ",["$","span","6",{"className":"cjk","children":["上。每道题目我也会给出对应的"]}]," ","Scala"," ",["$","span","7",{"className":"cjk","children":["解。如果确实有问题，比如"]}]," ","Scala"," ",["$","span","8",{"className":"cjk","children":["没有"]}]," ",["$","code","9",{"children":["Data.Graph"]}]," ",["$","span","10",{"className":"cjk","children":["这种不可变数据结构库，那么我们会视情况退回到非纯函数式编程。不过，这种情况总体应该是较少的。在每道题目的最后，我可能也会把对应的命令式版本给出，也许我们还会探讨一下函数式版本和命令式版本的区别。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["这些文章不是"]}]," ",["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["函数式编程入门"]}]]}],["$","span","2",{"className":"cjk","children":["。虽然我也许会提示某个库函数的用法，但是总体来说，这些文章假设你已经有了纯函数式编程的基本知识"]}]," ","–"," ","递归，列表，fold，map"," ",["$","span","3",{"className":"cjk","children":["等等。如果你对函数式编程和"]}]," ","Haskell"," ",["$","span","4",{"className":"cjk","children":["语言一无所知，那么在阅读这些文章之前最好简单学习一些"]}]," ","Haskell"," ",["$","span","5",{"className":"cjk","children":["知识。以下是我比较推荐的学习资源："]}]]}],["$","ul","14",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"https://www.seas.upenn.edu/~cis1940/spring13/lectures.html","children":["cis194"," ",["$","span","0",{"className":"cjk","children":["课程"]}]]}]]}],["$","li","1",{"children":[["$","em","0",{"children":["Thinking"," ","Functionally"," ","With"," ","Haskell"]}],["$","span","1",{"className":"cjk","children":["，以及其中文翻译版本"]}]," ",["$","a","2",{"href":"https://book.douban.com/subject/26769112/","children":["Haskell函数式程序设计"]}]]}],["$","li","2",{"children":[["$","span","0",{"className":"cjk","children":["练习是重要的，可以通过"]}]," ",["$","a","1",{"href":"https://wiki.haskell.org/99_questions/1_to_10","children":["Haskell"," ","99"," ",["$","span","0",{"className":"cjk","children":["题"]}]]}]," ",["$","span","2",{"className":"cjk","children":["进行练习。这些练习和"]}]," ","Leetcode"," ",["$","span","3",{"className":"cjk","children":["不同，大部分通过直接的递归就可以完成"]}]]}]]}],["$","blockquote","15",{"children":[["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["路漫漫其修远兮，吾将上下而求索"]}]]}]]}],["$","h2",null,{"className":"text-3xl","id":"下一个排列","children":[["$","$L16",null,{"href":"#下一个排列","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["31."," ",["$","span","0",{"className":"cjk","children":["下一个排列"]}]]]}],["$","h3",null,{"className":"text-2xl","id":"题目描述","children":[["$","$L16",null,{"href":"#题目描述","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["题目描述"]}]]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["以下是"]}]," ",["$","a","1",{"href":"https://leetcode.cn/problems/next-permutation/","children":["Leetcode"]}]," ",["$","span","2",{"className":"cjk","children":["的原始描述："]}]]}],["$","blockquote","19",{"children":[["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["整数数组的一个"]}]," ",["$","strong","1",{"children":[["$","span","0",{"className":"cjk","children":["排列"]}]]}]," ",["$","span","2",{"className":"cjk","children":["就是将其所有成员以序列或线性顺序排列。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["例如，"]}],["$","code","1",{"children":["arr = [1,2,3]"]}]," ",["$","span","2",{"className":"cjk","children":["，以下这些都可以视作"]}]," ",["$","code","3",{"children":["arr"]}]," ",["$","span","4",{"className":"cjk","children":["的排列："]}],["$","code","5",{"children":["[1,2,3]"]}],["$","span","6",{"className":"cjk","children":["、"]}],["$","code","7",{"children":["[1,3,2]"]}],"、`",["$","code","8",{"children":["[3,1,2]"]}],["$","span","9",{"className":"cjk","children":["、"]}],["$","code","10",{"children":["[2,3,1]"]}]," ",["$","span","11",{"className":"cjk","children":["。"]}],["$","span","12",{"className":"cjk","children":["整数数组的"]}]," ",["$","span","13",{"className":"cjk","children":["下一个排列"]}],["$","span","14",{"className":"cjk","children":["是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的"]}]," ",["$","span","15",{"className":"cjk","children":["下一个排列"]}],["$","span","16",{"className":"cjk","children":["就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["例如，"]}],["$","code","1",{"children":["arr = [1,2,3]"]}]," ",["$","span","2",{"className":"cjk","children":["的下一个排列是"]}]," ",["$","code","3",{"children":["[1,3,2]"]}]," ",["$","span","4",{"className":"cjk","children":["。"]}],["$","span","5",{"className":"cjk","children":["类似地，"]}],["$","code","6",{"children":["arr = [2,3,1]"]}]," ",["$","span","7",{"className":"cjk","children":["的下一个排列是"]}]," ",["$","code","8",{"children":["[3,1,2]"]}]," ",["$","span","9",{"className":"cjk","children":["。"]}],["$","span","10",{"className":"cjk","children":["而"]}]," ",["$","code","11",{"children":["arr = [3,2,1]"]}]," ",["$","span","12",{"className":"cjk","children":["的下一个排列是"]}]," ",["$","code","13",{"children":["[1,2,3]"]}]," ",["$","span","14",{"className":"cjk","children":["，因为"]}]," ",["$","code","15",{"children":["[3,2,1]"]}]," ",["$","span","16",{"className":"cjk","children":["不存在一个字典序更大的排列。"]}],["$","span","17",{"className":"cjk","children":["给你一个整数数组"]}]," ",["$","code","18",{"children":["nums"]}]," ",["$","span","19",{"className":"cjk","children":["，找出"]}]," ",["$","code","20",{"children":["nums"]}]," ",["$","span","21",{"className":"cjk","children":["的下一个排列。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["必须"]}],["$","span","1",{"className":"cjk","children":["原地"]}]," ",["$","span","2",{"className":"cjk","children":["修改，只允许使用额外常数空间。"]}]]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["我们是在纯函数式编程。纯函数式编程没有所谓的"]}]," ",["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["修改"]}]]}],["$","span","2",{"className":"cjk","children":["，所以最后一句话我们无视即可。"]}]]}],["$","h3",null,{"className":"text-2xl","id":"第一想法","children":[["$","$L16",null,{"href":"#第一想法","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["第一想法"]}]]]}],["$","p",null,{"children":["一般来说，很多算法问题能够给一个极为简洁（但低效）的纯函数式解。我们把这个解称之为程序的标准参照（Spec），我们的思考也从这里出发。然而，这个问题却似乎不是这种情况。考虑这个问题的数学表达："]}],["$","div",null,{"children":[["$","div",null,{"className":"overflow-auto","children":["$","div",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$17"}}]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["这没有给我们多少灵感。事实上，在很多编程语言里，把"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">P</span></span></span></span>"}}],["$","span","2",{"className":"cjk","children":["，也就是某个列表的所有排列求出来，比这个问题还要麻烦。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["这种情况下，一个直觉的尝试是，"]}],["$","strong","1",{"children":[["$","span","0",{"className":"cjk","children":["简单的递归"]}]]}]," ",["$","span","2",{"className":"cjk","children":["能不能解决问题呢？"]}]]}],["$","h3",null,{"className":"text-2xl","id":"递归","children":[["$","$L16",null,{"href":"#递归","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["递归"]}]]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["十进制整数可以被表示为一个列表。某些人把它叫做"]}]," ",["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["高精度"]}]]}]," ",["$","span","2",{"className":"cjk","children":["算法。例如，你可以用"]}]," ",["$","code","3",{"children":["[1, 0, 0]"]}]," ",["$","span","4",{"className":"cjk","children":["表示"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span>"}}]," ","."," ",["$","span","6",{"className":"cjk","children":["这种表示的好处是，整数"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>"}}],","," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>"}}],["$","span","9",{"className":"cjk","children":["，"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≥</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\ge b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>"}}]," ",["$","span","11",{"className":"cjk","children":["当且仅当"]}]," ",["$","code","12",{"children":["a >= b"]}],["$","span","13",{"className":"cjk","children":["，其中"]}]," ",["$","code","14",{"children":[">="]}]," ",["$","span","15",{"className":"cjk","children":["恰恰就是字典序比较。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["显然地，十进制整数也可以定义"]}]," ",["$","code","1",{"children":["next"]}]," ",["$","span","2",{"className":"cjk","children":["函数。这就是大名鼎鼎的"]}]," ",["$","q","3",{"children":[["$","span","0",{"className":"cjk","children":["后继"]}]]}]," ",["$","span","4",{"className":"cjk","children":["函数，即"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$18"}}]," ",","," ",["$","span","6",{"className":"cjk","children":["我们把这个函数记作"]}]," ",["$","code","7",{"children":["next10"]}],"."]}],["$","$L19","29",{"className":"haskell","children":["-- next10 [1, 1, 0] = [1, 1, 1]\nnext10 ..."]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["这确实给了我们一些灵感。例如，"]}],["$","code","1",{"children":["next10 [1, 1, 0] = [1, 1, 1]"]}],["$","span","2",{"className":"cjk","children":["，这是因为"]}]," ",["$","code","3",{"children":["next [1, 0] = [1, 1]"]}],"."," ",["$","span","4",{"className":"cjk","children":["可以很明显地看到这里的递归关系。具体来说，对于"]}]," ",["$","code","5",{"children":["x:xs"]}]," ",["$","span","6",{"className":"cjk","children":["表示的整数，"]}]]}],["$","$L19","31",{"className":"haskell","children":["next10 (x:xs) = x:(next10 xs)"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["上面的等式在大部分时候都成立。除非，"]}],["$","code","1",{"children":["next10 xs"]}]," ",["$","span","2",{"className":"cjk","children":["已经"]}]," ",["$","q","3",{"children":[["$","span","0",{"className":"cjk","children":["求不出来了"]}]]}],["$","span","4",{"className":"cjk","children":["，比如"]}]," ",["$","code","5",{"children":["[1, 9, 9]"]}]," ",["$","span","6",{"className":"cjk","children":["的下一个数字（后继）是"]}]," ",["$","code","7",{"children":["[2, 0, 0]"]}],["$","span","8",{"className":"cjk","children":["，这时就必须要"]}]," ",["$","q","9",{"children":[["$","span","0",{"className":"cjk","children":["进位"]}]]}],["$","span","10",{"className":"cjk","children":["。更严格地说，"]}],["$","code","11",{"children":["99"]}]," ",["$","span","12",{"className":"cjk","children":["是"]}]," ",["$","strong","13",{"children":[["$","span","0",{"className":"cjk","children":["最大"]}]]}]," ",["$","span","14",{"className":"cjk","children":["的两位十进制整数，所以上面的等式不成立。只要"]}]," ",["$","code","15",{"children":["xs"]}]," ",["$","span","16",{"className":"cjk","children":["还不是最大值，那么上面的等式就成立。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["无独有偶，题目要求的"]}]," ",["$","code","1",{"children":["next"]}]," ",["$","span","2",{"className":"cjk","children":["函数具有同样的性质。根据这个想法，构造递归函数："]}]]}],["$","$L19","34",{"className":"haskell","children":["next (x:xs)\n    | isMax xs  = tick x xs\n    | otherwise = x:next xs"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["那么，问题就变成了"]}]]}],["$","ol","36",{"children":[["$","li","0",{"children":[["$","span","0",{"className":"cjk","children":["如何定义"]}]," ",["$","code","1",{"children":["isMax"]}]]}],["$","li","1",{"children":[["$","span","0",{"className":"cjk","children":["如果"]}]," ",["$","code","1",{"children":["xs"]}]," ",["$","span","2",{"className":"cjk","children":["已经是最大值了，那么"]}]," ",["$","code","3",{"children":["tick"]}]," ",["$","span","4",{"className":"cjk","children":["函数该怎么定义呢？"]}]]}]]}],["$","h3",null,{"className":"text-2xl","id":"ismax-的定义","children":[["$","$L16",null,{"href":"#ismax-的定义","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","code","0",{"children":["isMax"]}]," ",["$","span","1",{"className":"cjk","children":["的定义"]}]]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["对于一个排列"]}]," ",["$","code","1",{"children":["xs"]}]," ",["$","span","2",{"className":"cjk","children":["来说，"]}],["$","q","3",{"children":[["$","span","0",{"className":"cjk","children":["最大"]}]]}]," ",["$","span","4",{"className":"cjk","children":["就是说，无论怎么重新排列，新的"]}]," ",["$","code","5",{"children":["xs'"]}]," ",["$","span","6",{"className":"cjk","children":["一定有"]}]," ",["$","code","7",{"children":["xs >= xs'"]}],"."]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["什么样的排列具有这种性质呢？一个很自然的想法是，因为这是字典序，所以如果想要排列尽可能大，那就一定要把大的数放在前面。换句话说，"]}],["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["降序"]}]]}]," ",["$","span","2",{"className":"cjk","children":["的排列一定是最大的。"]}]]}],["$","$L19","40",{"className":"haskell","children":["isMax :: Ord a => [a] -> Bool\nisMax = down"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["在"]}]," ","Haskell"," ",["$","span","1",{"className":"cjk","children":["里，判断一个列表的升降，我们可以使用"]}]," ",["$","q","2",{"children":["zip"," ","with"," ","tail"]}]," ",["$","span","3",{"className":"cjk","children":["的方法。具体来说，就是首先把列表和它的"]}]," ",["$","code","4",{"children":["tail"]}]," ",["$","span","5",{"className":"cjk","children":["进行"]}]," ",["$","code","6",{"children":["zip"]}],["$","span","7",{"className":"cjk","children":["，然后再使用"]}]," ",["$","code","8",{"children":["map"]}],","," ",["$","code","9",{"children":["all"]}]," ",["$","span","10",{"className":"cjk","children":["之类的函数来判断。"]}]]}],["$","$L19","42",{"className":"haskell","children":["dup :: [a] -> [(a, a)]\ndup xs = zip xs (tail xs)\n\ndown :: Ord a => [a] -> Bool\ndown = all (uncurry (>=)) . dup"]}],["$","h3",null,{"className":"text-2xl","id":"tick-的定义","children":[["$","$L16",null,{"href":"#tick-的定义","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","code","0",{"children":["tick"]}]," ",["$","span","1",{"className":"cjk","children":["的定义"]}]]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["如果"]}]," ",["$","code","1",{"children":["xs"]}]," ",["$","span","2",{"className":"cjk","children":["已经满足了"]}]," ",["$","code","3",{"children":["down"]}],["$","span","4",{"className":"cjk","children":["，换言之，它已经是最大的了，那么"]}]," ",["$","code","5",{"children":["x:xs"]}]," ",["$","span","6",{"className":"cjk","children":["必须要进行比较复杂的操作才能得到下一个枚举。这个复杂的操作，被我称为"]}]," ",["$","code","7",{"children":["tick"]}],"."]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["例如，"]}],["$","code","1",{"children":["[2, 4, 3, 1]"]}]," ",["$","span","2",{"className":"cjk","children":["的下一个枚举是"]}]," ",["$","code","3",{"children":["[3, 1, 2, 4]"]}],"."," ",["$","span","4",{"className":"cjk","children":["这时"]}]," ",["$","code","5",{"children":["x"]}]," ",["$","span","6",{"className":"cjk","children":["是"]}]," ",["$","code","7",{"children":["2"]}],","," ",["$","code","8",{"children":["xs"]}]," ",["$","span","9",{"className":"cjk","children":["是"]}]," ",["$","code","10",{"children":["[4, 3, 1]"]}],["$","span","11",{"className":"cjk","children":["，"]}],["$","code","12",{"children":["xs"]}]," ",["$","span","13",{"className":"cjk","children":["满足"]}]," ",["$","code","14",{"children":["down"]}],["$","span","15",{"className":"cjk","children":["，所以，这时不能再进行简单的递归，而要用"]}]," ",["$","code","16",{"children":["tick"]}]," ",["$","span","17",{"className":"cjk","children":["进行计算。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["继续以"]}]," ",["$","code","1",{"children":["[2, 4, 3, 1]"]}]," ",["$","span","2",{"className":"cjk","children":["为例。直觉上来讲，要求"]}]," ",["$","code","3",{"children":["[2, 4, 3, 1]"]}]," ",["$","span","4",{"className":"cjk","children":["的下一个枚举"]}]," ",["$","code","5",{"children":["ys@(y:ys')"]}],","," ",["$","span","6",{"className":"cjk","children":["可以分为两步："]}]]}],["$","ul","47",{"children":[["$","li","0",{"children":[["$","span","0",{"className":"cjk","children":["确定"]}]," ",["$","code","1",{"children":["y"]}]," ",["$","span","2",{"className":"cjk","children":["是什么"]}]]}],["$","li","1",{"children":[["$","span","0",{"className":"cjk","children":["确定"]}]," ",["$","code","1",{"children":["ys'"]}]," ",["$","span","2",{"className":"cjk","children":["是什么"]}]]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["首先，"]}],["$","code","1",{"children":["y"]}]," ",["$","span","2",{"className":"cjk","children":["要严格大于"]}]," ",["$","code","3",{"children":["x"]}],"."," ",["$","span","4",{"className":"cjk","children":["因为我们已经表明，所有以"]}]," ",["$","code","5",{"children":["x"]}]," ",["$","span","6",{"className":"cjk","children":["开头的枚举都要比"]}]," ",["$","code","7",{"children":["x:xs"]}]," ",["$","span","8",{"className":"cjk","children":["小。其次，"]}],["$","code","9",{"children":["y"]}]," ",["$","span","10",{"className":"cjk","children":["要尽可能小，不然会有更小的枚举"]}]," ",["$","code","11",{"children":["p"]}]," ",["$","span","12",{"className":"cjk","children":["满足"]}]," ",["$","code","13",{"children":["p > x:xs"]}],"."]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["上例中"]}]," ",["$","code","1",{"children":["y"]}]," ",["$","span","2",{"className":"cjk","children":["是"]}]," ",["$","code","3",{"children":["3"]}],"."," ",["$","span","4",{"className":"cjk","children":["很容易想到，"]}],["$","code","5",{"children":["3"]}]," ",["$","span","6",{"className":"cjk","children":["是"]}]," ",["$","code","7",{"children":["xs = [4, 3, 1]"]}]," ",["$","span","8",{"className":"cjk","children":["中，"]}],["$","strong","9",{"children":[["$","span","0",{"className":"cjk","children":["最小的"]}]]}]," ",["$","span","10",{"className":"cjk","children":["大于"]}]," ",["$","code","11",{"children":["x = 2"]}]," ",["$","span","12",{"className":"cjk","children":["的数。我们把这种数叫做"]}]," ",["$","code","13",{"children":["pivot"]}],"."," ",["$","span","14",{"className":"cjk","children":["可以写出定义代码："]}]]}],["$","$L19","50",{"className":"haskell","children":["pivot x xs = minumum [ x' | x' <- xs, x' > x  ]"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["注意到"]}]," ",["$","code","1",{"children":["xs"]}]," ",["$","span","2",{"className":"cjk","children":["是有序的，以上代码可以改写为"]}]]}],["$","$L19","52",{"className":"haskell","children":["pivot x = last . takeWhile (> x)"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["需要指出的是，"]}],["$","code","1",{"children":["pivot"]}]," ",["$","span","2",{"className":"cjk","children":["函数是一个偏函数，我们用了不安全的"]}]," ",["$","code","3",{"children":["last"]}]," ",["$","span","4",{"className":"cjk","children":["和"]}]," ",["$","code","5",{"children":["minimum"]}]," ",["$","span","6",{"className":"cjk","children":["操作，这意味着在调用时，必须保证至少存在一个"]}]," ",["$","code","7",{"children":["x' > x"]}],"."]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["如果能够找到这样的"]}]," ",["$","code","1",{"children":["y > x"]}],["$","span","2",{"className":"cjk","children":["，那么我们就可以保证，"]}],["$","code","3",{"children":["y:ys'"]}]," ",["$","span","4",{"className":"cjk","children":["绝对比"]}]," ",["$","code","5",{"children":["x:xs"]}]," ",["$","span","6",{"className":"cjk","children":["大。所以，"]}],["$","code","7",{"children":["ys'"]}]," ",["$","span","8",{"className":"cjk","children":["的构造要使得"]}]," ",["$","code","9",{"children":["y:ys'"]}]," ",["$","span","10",{"className":"cjk","children":["尽可能小。也就是说，"]}],["$","code","11",{"children":["ys'"]}]," ",["$","span","12",{"className":"cjk","children":["应该是最小的一个排列。和我们上面对于最大值的讨论一样，最小的排列就是单调递增的排列。这只需要排序即可。"]}]]}],["$","p",null,{"children":[["$","code","0",{"children":["ys'"]}]," ",["$","span","1",{"className":"cjk","children":["中的元素自然是"]}]," ",["$","code","2",{"children":["xs"]}]," ",["$","span","3",{"className":"cjk","children":["除掉"]}]," ",["$","code","4",{"children":["y"]}]," ",["$","span","5",{"className":"cjk","children":["之后，再加上"]}]," ",["$","code","6",{"children":["x"]}],"."," ",["$","span","7",{"className":"cjk","children":["例如，上面的例子"]}]," ",["$","code","8",{"children":["[2, 4, 3, 1]"]}],["$","span","9",{"className":"cjk","children":["，可以给出"]}]]}],["$","$L19","56",{"className":"haskell","children":["x:xs = [2, 4, 3, 1]\n\ny = last . takeWhile (> x) $ xs\n  = last [4, 3]\n  = 3\n\nys'' = delete 3 xs\n     = [4, 1]\n\nys' = sort (x:ys'')\n    = sort [2, 4, 1]\n    = [1, 2, 4]\n\nys = y:ys'\n   = [3, 1, 2, 4]"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["最后，还需要讨论一种情况，那就是"]}]," ",["$","code","1",{"children":["pivot x xs = ⊥"]}],"."," ",["$","span","2",{"className":"cjk","children":["这种情况必须先行判断，以免出现错误。什么时候"]}]," ",["$","code","3",{"children":["pivot"]}]," ",["$","span","4",{"className":"cjk","children":["不存在呢？那就是"]}]," ",["$","code","5",{"children":["x:xs"]}]," ",["$","span","6",{"className":"cjk","children":["已经满足"]}]," ",["$","code","7",{"children":["down"]}]," ",["$","span","8",{"className":"cjk","children":["的时候，例如"]}]," ",["$","code","9",{"children":["[4, 3, 2, 1]"]}],["$","span","10",{"className":"cjk","children":["，这种时候，只需要把输入反转即可。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["根据以上讨论，我们给出"]}]," ",["$","code","1",{"children":["tick"]}]," ",["$","span","2",{"className":"cjk","children":["函数的定义："]}]]}],["$","$L19","59",{"className":"haskell","children":["import Data.List (delete)\n\ntick :: Ord a -> a -> [a] -> [a]\ntick x xs\n    | null l    = reverse (x:xs)\n    | otherwise = y:(sort (x:ys'))\n    where l = takeWhile (> x) xs\n          y = last l\n          ys' = delete y xs"]}],["$","$L19","60",{"className":"haskell","children":["> tick 4 [3, 2, 1]\n[1, 2, 3, 4]\n\n> tick 2 [4, 3, 1]\n[3, 1, 2, 4]"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["毫无疑问，目前的"]}]," ",["$","code","1",{"children":["next"]}]," ",["$","span","2",{"className":"cjk","children":["函数已经能够正确地解决这个问题了。读者不妨把以上的"]}]," ","Haskell"," ",["$","span","3",{"className":"cjk","children":["代码翻译为"]}]," ","Scala，在"," ","Leetcode"," ",["$","span","4",{"className":"cjk","children":["里试一试。从递归出发，我们发现这个问题的解非常直觉，可以简单而轻松地给出。"]}]]}],["$","h3",null,{"className":"text-2xl","id":"更高效的代码","children":[["$","$L16",null,{"href":"#更高效的代码","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["更高效的代码"]}]]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["上面定义的"]}]," ",["$","code","1",{"children":["next"]}]," ",["$","span","2",{"className":"cjk","children":["函数虽然优雅直观，但是不够高效。主要的问题在于，"]}]]}],["$","ol","64",{"children":[["$","li","0",{"children":[["$","code","0",{"children":["tick"]}]," ",["$","span","1",{"className":"cjk","children":["中，不需要用到"]}]," ",["$","code","2",{"children":["sort"]}],"."," ",["$","code","3",{"children":["xs"]}]," ",["$","span","4",{"className":"cjk","children":["是有序的，可以利用这点在"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}]," ",["$","span","6",{"className":"cjk","children":["内把新的有序序列组合起来"]}]]}],["$","li","1",{"children":[["$","code","0",{"children":["down"]}]," ",["$","span","1",{"className":"cjk","children":["被"]}]," ",["$","code","2",{"children":["next"]}]," ",["$","span","3",{"className":"cjk","children":["调用了好多次，每次调用都是"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}]," ",["$","span","5",{"className":"cjk","children":["的，导致总体复杂度出现了"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>"}}],"."]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["问题"]}]," ","1."," ",["$","span","1",{"className":"cjk","children":["很简单，只需要重新写一下"]}]," ",["$","code","2",{"children":["tick"]}]," ",["$","span","3",{"className":"cjk","children":["即可。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["问题"]}]," ","2."," ",["$","span","1",{"className":"cjk","children":["比较麻烦。我们需要仔细观查一下计算的过程，例如"]}]," ",["$","code","2",{"children":["next [3, 5, 1, 4, 2]"]}],["$","span","3",{"className":"cjk","children":["："]}]]}],["$","$L19","67",{"className":"haskell","children":["next [3, 5, 1, 4, 2]\n= 3:(next [5, 1, 4, 2])\n= 3:(5:(next [1, 4, 2]))\n= 3:(5:(tick 1 [4, 2]))"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["可以看到，这个计算总是会具有一种"]}]," ",["$","q","1",{"children":[["$","span","0",{"className":"cjk","children":["形状"]}]]}],["$","span","2",{"className":"cjk","children":["，那就是输入的前一部分保持不变，后一部分被"]}]," ",["$","code","3",{"children":["tick"]}],"."]}],["$","$L19","69",{"className":"haskell","children":["[3, 5,           1, 4, 2]\n^^^^^^           #######\n保持不变的部分     tick 的部分"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["而它们的分界线，直觉上来讲，就是"]}]," ",["$","code","1",{"children":["down"]}]," ",["$","span","2",{"className":"cjk","children":["由"]}]," ",["$","code","3",{"children":["False"]}]," ",["$","span","4",{"className":"cjk","children":["变为"]}]," ",["$","code","5",{"children":["True"]}]," ",["$","span","6",{"className":"cjk","children":["的时刻。我们再回到"]}]," ",["$","code","7",{"children":["next"]}]," ",["$","span","8",{"className":"cjk","children":["函数："]}]]}],["$","$L19","71",{"className":"haskell","children":["next (x:xs)\n    | down xs  = tick x xs\n    | otherwise = x:next xs"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["在每次递归的时候，"]}],["$","code","1",{"children":["next (x:xs)"]}]," ",["$","span","2",{"className":"cjk","children":["都会计算"]}]," ",["$","code","3",{"children":["down xs"]}],["$","span","4",{"className":"cjk","children":["，再用刚才的例子，"]}]]}],["$","$L19","73",{"className":"haskell","children":["-- 第一次递归\ndown [5, 1, 4, 2] = False\n-- 第二次递归\ndown [1, 4, 2]    = False\n-- 第三次递归\ndown [4, 2]       = True"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["事实上，"]}],["$","code","1",{"children":["down"]}]," ",["$","span","2",{"className":"cjk","children":["每次都顺序地计算"]}]," ",["$","code","3",{"children":["tails"]}]," ",["$","span","4",{"className":"cjk","children":["里的下一个元素："]}]]}],["$","$L19","75",{"className":"haskell","children":["> tails [3, 5, 1, 4, 2]\n[[3,5,1,4,2],[5,1,4,2],[1,4,2],[4,2],[2],[]]"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["不妨把"]}]," ",["$","code","1",{"children":["next"]}]," ",["$","span","2",{"className":"cjk","children":["每次用到的"]}]," ",["$","code","3",{"children":["down xs"]}]," ",["$","span","4",{"className":"cjk","children":["提前"]}],["$","sup","5",{"children":[["$","a","0",{"href":"#note-1","id":"note-anchor-1","children":["1"]}]]}],["$","span","6",{"className":"cjk","children":["算出来，并放到一个列表里"]}]]}],["$","$L19","77",{"className":"haskell","children":["import Data.List (tails)\n\nnextDown (x:xs) (d:ds)\n    | d = tick x xs\n    | otherwise = x:nextDown xs ds\n\nnext xs = nextDown xs (downs xs)\ndowns = drop 1 . map down . tails"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["如果我们可以在"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}]," ",["$","span","2",{"className":"cjk","children":["时间内算出"]}]," ",["$","code","3",{"children":["downs"]}],["$","span","4",{"className":"cjk","children":["，问题"]}]," ","2."," ",["$","span","5",{"className":"cjk","children":["就迎刃而解了。直觉上来说，这是很容易的，因为"]}]," ",["$","code","6",{"children":["down [4, 3, 2, 1]"]}]," ",["$","span","7",{"className":"cjk","children":["本来就是要保证："]}]]}],["$","ul","79",{"children":[["$","li","0",{"children":[["$","code","0",{"children":["4 >= 3"]}]]}],["$","li","1",{"children":[["$","code","0",{"children":["down [3, 2, 1]"]}]]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["换句话说，当我们要算"]}]," ",["$","code","1",{"children":["down [4, 3, 2, 1]"]}]," ",["$","span","2",{"className":"cjk","children":["的时候，"]}],["$","code","3",{"children":["down [3, 2, 1]"]}]," ",["$","span","4",{"className":"cjk","children":["已经被计算过了，只是需要一种方式把这种"]}]," ",["$","q","5",{"children":[["$","span","0",{"className":"cjk","children":["上一次的计算"]}]]}]," ",["$","span","6",{"className":"cjk","children":["存起来以便后续使用。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["函数式编程社区早就有了对于这种问题的解决方法："]}]," ","scan"," ","theorem."]}],["$","p",null,{"children":["Scan"," ","theorem"," ",["$","span","0",{"className":"cjk","children":["指的是"]}]]}],["$","$L19","83",{"className":"haskell","children":["map (foldl op a) . inits = scanl op a"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["类似地"]}]]}],["$","$L19","85",{"className":"haskell","children":["map (foldr op a) . tails = scanr op a"]}],["$","p",null,{"children":["利用这个定理，我们给出以下程序计算过程."," ",["$","span","0",{"className":"cjk","children":["注意，为了避免问题，我们定义了"]}]]}],["$","$L19","87",{"className":"haskell","children":["tails' = filter (not . null) . tails"]}],["$","$L19","88",{"className":"haskell","children":["downs = { definition }\n        drop 1 . map down . tails'\n      = { definition }\n        drop 1 . map (all (uncurry (>=)) . dup) . tails'\n      = { map distributivity }\n        drop 1 . map (all (uncurry (>=))) . map dup . tails'\n      = { need another proof (1) }\n        drop 1 . map (all (uncurry (>=))) . tails . dup\n      = { definition }\n        drop 1 . map (foldr (&&) True . map (uncurry (>=))) . tails . dup\n      = { fold-map fusion }\n        drop 1 . map (foldr join True) . tails . dup\n      = { scan theorem }\n        drop 1 . scanr join True . dup\n          where join (x, x1) r = x >= x1 && r"]}],["$","ol","89",{"children":[["$","li","0",{"children":[["$","span","0",{"className":"cjk","children":["需要一个新的证明，它指的是下面的代码是等价的："]}]]}]]}],["$","$L19","90",{"className":"haskell","children":["> map dup $ tails' [4, 2, 3, 1]\n[[(4,2),(2,3),(3,1)],[(2,3),(3,1)],[(3,1)],[]]\n\n> tails $ dup [4, 2, 3, 1]\n[[(4,2),(2,3),(3,1)],[(2,3),(3,1)],[(3,1)],[]]"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["证明略去。"]}]]}],["$","h3",null,{"className":"text-2xl","id":"总结","children":[["$","$L16",null,{"href":"#总结","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],[["$","span","0",{"className":"cjk","children":["总结"]}]]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["结合上面的讨论，我们可以给出高效的函数式实现："]}]]}],["$","$L19","94",{"className":"haskell","children":["tick x xs = build l r x\n    where (l, r) = span (> x) xs\n          build [] r x = reverse (x:r)\n          build l  r x = last l : reverse (init l ++ [x] ++ r)\n\ndup xs = zip xs (tail xs)\ndowns = scanr (\\(x, x1) r -> (x >= x1) && r) True . dup\n\nnext xs = l ++ tick (head r) (tail r)\n    where (l, r) = splitAt (n - 1) xs\n          n = length $ takeWhile not $ downs xs"]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["这是"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>"}}]," ",["$","span","2",{"className":"cjk","children":["时间复杂度的。不过，我们的常数确实会比命令式程序大些。理论上来说，上一节定义的"]}]," ",["$","code","3",{"children":["nextDown"]}]," ",["$","span","4",{"className":"cjk","children":["函数的实现要更高效一些（避免了"]}]," ",["$","code","5",{"children":["length"]}]," ",["$","span","6",{"className":"cjk","children":["和"]}]," ",["$","code","7",{"children":["splitAt"]}],["$","span","8",{"className":"cjk","children":["），但是我仍然觉得本节给出的实现更清楚。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["我把等价的"]}]," ","Scala"," ",["$","span","1",{"className":"cjk","children":["代码提交到了"]}]," ","leetcode:"]}],["$","$L19","97",{"className":"scala","children":["object Solution {\n    def nextPermutation(nums: Array[Int]): Unit = {\n        val nextNums = next(nums.toList).toArray\n        for (i <- nums.indices) {\n            nums(i) = nextNums(i)\n        }\n    }\n\n    def dup(xs: List[Int]): List[(Int, Int)] = xs zip xs.drop(1)\n\n    def tick(x: Int, xs: List[Int]): List[Int] = {\n        val (l, r) = xs.span(_ > x)\n        if (l.isEmpty) r.reverse ++ List(x)\n        else l.last :: (l.init ++ List(x) ++ r).reverse\n    }\n\n    def tailsDown(xs: List[(Int, Int)]): List[Boolean] = \n        xs.scanRight(true) { case ((x, x1), r) => (x >= x1) && r }\n\n    def next(xs: List[Int]): List[Int] = {\n        val n = tailsDown(dup(xs)).takeWhile(!_).length\n        val (l, r) = xs.splitAt(n - 1)\n        l ++ tick(r.head, r.tail)\n    }\n}"]}],["$","p",null,{"children":[["$","q","0",{"children":[["$","span","0",{"className":"cjk","children":["下一个排列"]}]]}]," ","问题是少有的命令式程序可以比函数式程序简洁的问题。甚至，Haskell"," ",["$","span","1",{"className":"cjk","children":["的"]}]," ",["$","a","2",{"href":"https://hackage.haskell.org/package/permutation-0.5.0.5/docs/Data-Permute.html","children":["Data.Permute"]}]," ",["$","span","3",{"className":"cjk","children":["库，也用了命令式的方法。"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["在命令式程序中，上面的算法可以被描述为两个过程："]}]]}],["$","ol","100",{"children":[["$","li","0",{"children":[["$","span","0",{"className":"cjk","children":["从右向左遍历，找到最长的下降序列"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>…</mo><mo stretchy=\"false\">(</mo><mtext>len - 1</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i \\dots (\\text{len - 1})]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">len - 1</span></span><span class=\"mclose\">)]</span></span></span></span>"}}]]}],["$","li","1",{"children":[["$","span","0",{"className":"cjk","children":["进行计算，"]}],["$","ul","1",{"children":[["$","li","0",{"children":[["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["如果"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>"}}],["$","span","2",{"className":"cjk","children":["，那么反转数组"]}]]}]]}],["$","li","1",{"children":[["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["其他情况，找到"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$1a"}}],["$","span","2",{"className":"cjk","children":["，使得"]}]]}],["$","ul","1",{"children":[["$","li","0",{"children":[["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$1b"}}]]}],["$","li","1",{"children":[["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"$1c"}}]]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["交换"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i - 1, j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>"}}],["$","span","2",{"className":"cjk","children":["，反转"]}]," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>…</mo><mo stretchy=\"false\">(</mo><mtext>len - 1</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i \\dots (\\text{len - 1})]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">len - 1</span></span><span class=\"mclose\">)]</span></span></span></span>"}}]]}]]}]]}]]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["如果读者完全理解了上面的函数式算法，这个命令式算法想必是非常直白的。但如果把这个算法直接端到你的面前喂给你，你真的能明白它为什么是正确的吗？"]}]]}],["$","p",null,{"children":[["$","span","0",{"className":"cjk","children":["让我们用一个"]}]," ","Python"," ",["$","span","1",{"className":"cjk","children":["程序结束今天的故事吧！"]}]]}],["$","$L19","103",{"className":"python","children":["def swap(a, i, j):\n    tmp = a[i]\n    a[i] = a[j]\n    a[j] = tmp\n\ndef rev(a, start, end):\n    l = end - start\n    for i in range(start, start + l // 2):\n        swap(a, i, end - (i - start) - 1)\n\ndef solve(a):\n    for i in range(len(a) - 1, -1, -1):\n        if i >= 1 and a[i - 1] < a[i]:\n            break\n    if i == 0:\n        rev(a, 0, len(a))\n    else:\n        j = len(a) - 1\n        while j >= i and a[j] <= a[i - 1]:\n            j -= 1\n        swap(a, i - 1, j)\n        rev(a, i, len(a))"]}],["$","div",null,{"className":"notes","children":[["$","$L1d",null,{"itemId":"1","id":"note-1","children":[["$","p",null,{"children":["注意这不是精确的描述，Haskell"," ",["$","span","0",{"className":"cjk","children":["是惰性的，求值过程需要仔细分析"]}]]}]]}]]}]]}]]}]]}]
