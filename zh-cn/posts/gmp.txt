2:"$Sreact.fragment"
3:I[65469,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-326308bd995c4991.js"],""]
4:I[39926,["645","static/chunks/61af6f7f-9cff01d0fc100f98.js","469","static/chunks/469-7ee2e4c850f58403.js","306","static/chunks/306-ef157ce75cbf9e7a.js","827","static/chunks/app/%5Blocale%5D/posts/%5Bslug%5D/page-326308bd995c4991.js"],"default"]
6:I[78703,[],""]
9:I[53751,[],""]
a:I[59576,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"Providers"]
5:T5a9,/* 修改这个宏，使得加法有右值引用的版本 */
#define __GMPP_DEFINE_BINARY_FUNCTION(fun, eval_fun)                   \
                                                                       \
template <class T, class U, class V, class W>                          \
inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,       \
__gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> >      \
fun(const __gmp_expr<T, U> &expr1, const __gmp_expr<V, W> &expr2)      \
{                                                                      \
  return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,     \
     __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> > \
    (expr1, expr2);                                                    \
}                                                                      \
template <class T, class U, class V, class W>                          \
inline __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,       \
__gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> >      \
fun(__gmp_expr<T, U> &&expr1, __gmp_expr<V, W> &&expr2)                \
{                                                                      \
  return __gmp_expr<typename __gmp_resolve_expr<T, V>::value_type,     \
     __gmp_binary_expr<__gmp_expr<T, U>, __gmp_expr<V, W>, eval_fun> > \
    (std::move(expr1), std::move(expr2));                              \
}7:["locale","zh-cn","d"]
8:["slug","gmp","d"]
0:["V33pvllFFBg-Cj_mgVzZP",[[["",{"children":[["locale","zh-cn","d"],{"children":["posts",{"children":[["slug","gmp","d"],{"children":["__PAGE__?{\"locale\":\"zh-cn\",\"slug\":\"gmp\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":[["locale","zh-cn","d"],{"children":["posts",{"children":[["slug","gmp","d"],{"children":["__PAGE__",{},[["$L1",["$","article",null,{"children":[["$","h1",null,{"className":"text-4xl font-bold mb-2","children":"一个不大不小的陷阱 -- GMP 的 C++ 绑定"}],["$","div",null,{"className":"text-sm text-gray-500 mb-5","children":"12/21/2020"}],["$","$2","0",{"children":[["$","div",null,{"className":"toc","id":"toc","children":[["$","ul","0",{"children":[["$","li","0",{"children":[["$","a","0",{"href":"#gnu-mp库的c绑定","id":"toc-gnu-mp库的c绑定","children":["GNU"," ","MP库的C++绑定"]}]]}],["$","li","1",{"children":[["$","a","0",{"href":"#一个奇怪的问题","id":"toc-一个奇怪的问题","children":["一个奇怪的问题"]}]]}],["$","li","2",{"children":[["$","a","0",{"href":"#gnu-mp库的设计","id":"toc-gnu-mp库的设计","children":["GNU"," ","MP库的设计"]}]]}],["$","li","3",{"children":[["$","a","0",{"href":"#解决问题","id":"toc-解决问题","children":["解决问题"]}]]}],["$","li","4",{"children":[["$","a","0",{"href":"#gc与raii","id":"toc-gc与raii","children":["GC与RAII"]}]]}]]}]]}],["$","h2",null,{"className":"text-3xl","id":"gnu-mp库的c绑定","children":[["$","$L3",null,{"href":"#gnu-mp库的c绑定","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["GNU"," ","MP库的C++绑定"]]}],["$","p",null,{"children":["GNU"," ","MP库是一个大整数和多精度浮点数的运算库。它本身是用C语言写成的，但也提供了C++绑定。当用C++写程序时，如果你不是自虐狂或者狂热的手动编译器变换爱好者，那么用C++绑定毫无疑问是更好的选择。"]}],["$","p",null,{"children":["这是因为，C语言版本的绑定把所有操作都封装成了类似于汇编语言中的指令。比如说，如果要算一个大整数版本的",["$","code","0",{"children":["1+2"]}],"，那么应该这么写："]}],["$","$L4","4",{"className":"c","children":["mpz_t a, b, c;\nmpz_init_set_ui(a, 1);\nmpz_init_set_ui(b, 2);\nmpz_add(c, a, b);\nmpz_clear(a);\nmpz_clear(b);\nmpz_clear(c);"]}],["$","p",null,{"children":["说实话，这还不如直接写汇编来的简洁："]}],["$","$L4","6",{"className":"asm","children":["mov $1, %eax\nmov $2, %ebx\nadd %ebx, %eax\nmov %ecx, %eax"]}],["$","p",null,{"children":["这种情况的根本原因是，C语言中没有方便的手段来进行内存资源管理和快速结构构造（当然，新的标准也有了一些），导致C语言虽然可以实现",["$","em","0",{"children":["表达式求值模型"]}],"，但无法方便地实现",["$","em","1",{"children":["自定义类型的表达式求值模型"]}],"。"]}],["$","p",null,{"children":["而表达式求值模型和寄存器机模型之间的变换就是编译的本质，用C语言这样写代码，相当于是在自己进行部分编译器进行的变换（比如ANF）。所以，喜欢这样写代码的人要么是喜欢写汇编，要么是喜欢自己进行手动编译器变换。"]}],["$","p",null,{"children":["C++绑定这时堪称救世主，在不得不使用C/C++的场合（比如我校的《现代密码学实验》课程），用C++绑定可以避免这种尴尬："]}],["$","$L4","10",{"className":"cpp","children":["const mpz_class a {1}, b {2};\nconst auto c = a + b;"]}],["$","p",null,{"children":["这段代码可以执行和上面C语言代码",["$","strong","0",{"children":["完全相同"]}],"的行为。这是因为C++相比C有了几个优良特性，其中最优秀的的当属所谓的RAII，也就是",["$","strong","1",{"children":["R"]}],"esource"," ",["$","strong","2",{"children":["A"]}],"cquisition"," ",["$","strong","3",{"children":["I"]}],"s"," ",["$","strong","4",{"children":["I"]}],"nitialization，获取资源即初始化。在这里和运行栈一起配合，简单来说说就是构造函数和析构函数的配合，使得栈上的对象在构造时（手动引入一个绑定时）获取资源，在析构时（退出当前作用域时自动析构）释放资源。对内存这种资源来说，这样一来我们好似在使用一种『有GC的语言』，无须关心任何内存问题一样。"]}],["$","p",null,{"children":["自然而然的一个问题是，栈式RAII真的能够代替GC吗？通过下文对GMP的解说，想必读者能够给出自己的答案。"]}],["$","h2",null,{"className":"text-3xl","id":"一个奇怪的问题","children":[["$","$L3",null,{"href":"#一个奇怪的问题","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["一个奇怪的问题"]]}],["$","p",null,{"children":["已经说过，我使用GNU"," ","MP库的主要目的是为了进行密码学实验。我们的密码学实验中有一个计算DLP（离散对数）的问题，规模非常大，运行速度是比较重要的因素。由此我必须使用GNU"," ","MP这种速度有保证的库。然而，在实验中，我遇到了一个非常奇怪的问题，那就是有时候某些代码常常出现不正确的结果，而我反复检查代码也不能发现问题的由来。更严重的是，这些问题像幽灵一样，有时出现有时不出现，出现时的结果有时是",["$","em","0",{"children":["不相同"]}],"的。"]}],["$","p",null,{"children":["对此，我第一反应是出了一些内存问题。可我立刻就否定了这种想法。GNU"," ","MP这种被很多人使用的库，一般来说不会出现这种恶性问题。可是我的代码中只有简单的计算，类似于："]}],["$","$L4","16",{"className":"cpp","children":["/*\n * Pohlig-Hellman algorithm for Group of prime power order\n */\nmpz_class\npohligHellmanP(const mpz_class& g, const mpz_class& h,\n               const mpz_class& pn, const mpz_class& en,\n               const mpz_class& p) {\n    const auto y = fastPow(g, Pow(pn, en - 1), p);\n    assert (fastPow(y, pn, p) == 1);\n    mpz_class x{0};\n    for (auto i = 0; i < en; ++i) {\n        auto hi = fastPow(Inverse(fastPow(g, x, p), p) * h,\n                          Pow(pn, en - 1 - i), p);\n        auto di = pDlp(y, hi, pn, p);\n        x = x + Pow(pn, i) * di;\n    }\n    return x;\n}"]}],["$","p",null,{"children":["在经过了一番艰险的探索后，我确定了一个『最小问题结构』。『最小问题结构』是说，触发这个问题的最简单、行数最少的代码。它是："]}],["$","$L4","18",{"className":"cpp","children":["mpz_class nothing() {\n  const auto a = mpz_class { 1 } + mpz_class { 2 };\n  std::cout << a << std::endl;\n  return a;\n}\n\nint main() {\n  std::cout << nothing();\n}"]}],["$","p",null,{"children":["在我的计算机上，这段代码会给出非常惊人的结果："]}],["$","$L4","20",{"className":"shell","children":["➜  gmp_error git:(master) ✗ g++ test.cpp -o a -g -lgmp -O0 -lgmpxx\n➜  gmp_error git:(master) ✗ ./a                                   \n94361021124304\n94361021124336%"]}],["$","p",null,{"children":[["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>94361021124304</mn></mrow><annotation encoding=\"application/x-tex\">1+2=94361021124304</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">94361021124304</span></span></span></span>"}}],"，还是"," ",["$","span",null,{"data-testid":"react-katex","dangerouslySetInnerHTML":{"__html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>94361021124336</mn></mrow><annotation encoding=\"application/x-tex\">1+2=94361021124336</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">94361021124336</span></span></span></span>"}}],"？"]}],["$","p",null,{"children":["如此简单的代码却产生了如此诡异的错误，真是怪哉！"]}],["$","h2",null,{"className":"text-3xl","id":"gnu-mp库的设计","children":[["$","$L3",null,{"href":"#gnu-mp库的设计","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["GNU"," ","MP库的设计"]]}],["$","p",null,{"children":["要破解这个谜团，我们应该从另一个怪现象下手，那即是："]}],["$","$L4","25",{"className":"cpp","children":["mpz_class nothing() {\n  const mpz_class a = mpz_class { 1 } + mpz_class { 2 };\n  std::cout << a << std::endl;\n  return a;\n}\n\nint main() {\n  std::cout << nothing();\n}"]}],["$","p",null,{"children":["这段代码竟然毫无问题？恐怕读者难以相信这个事实，然而它就是真正的现实："]}],["$","$L4","27",{"className":"shell","children":["➜  gmp_error git:(master) ✗ g++ test.cpp -o a -g -lgmp -O0 -lgmpxx\n➜  gmp_error git:(master) ✗ ./a                                   \n3\n3%"]}],["$","p",null,{"children":["这样一来问题就很明朗了。",["$","code","0",{"children":["auto"]}],"这个关键字究竟会将",["$","code","1",{"children":["a"]}],"推导为什么类型？用IDE或者c++filt查看，答案更是让人一头雾水："]}],["$","$L4","29",{"className":"cpp","children":["const __gmp_expr<mpz_t, __gmp_binary_expr<mpz_class, mpz_class, __gmp_binary_plus>> a"]}],["$","p",null,{"children":["这类型是什么？看来必须到",["$","code","0",{"children":["gmpxx.h"]}],"这个文件里寻找答案了。"]}],["$","p",null,{"children":["在",["$","code","0",{"children":["gmpxx.h"]}],"中，我们会看到，",["$","code","1",{"children":["mpz_class"]}],"实际上是",["$","code","2",{"children":["mpz_expr<mpz_t, mpz_t>"]}],":"]}],["$","$L4","32",{"className":"cpp","children":["/**************** mpz_class -- wrapper for mpz_t ****************/\n\ntemplate <> // line 1572\nclass __gmp_expr<mpz_t, mpz_t>{ ... }; \n\ntypedef __gmp_expr<mpz_t, mpz_t> mpz_class; // line 1756"]}],["$","p",null,{"children":["那么，这个",["$","code","0",{"children":["__gmp_expr"]}],"高阶类型（理论上来说这确实相当于高阶类型）恐怕还有一些其他的特化，果不其然，这个文件中还定义了很多",["$","code","1",{"children":["__gmp_expr"]}],"的特化，比如说，我们前面看到的",["$","code","2",{"children":["a"]}],"，实际上的类型是："]}],["$","$L4","34",{"className":"cpp","children":["template <class T, class Op>\nclass __gmp_expr\n<T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, T>, Op> >"]}],["$","p",null,{"children":["我们观察一下这个类的构造函数："]}],["$","$L4","36",{"className":"cpp","children":["__gmp_expr(const val1_type &val1, const val2_type &val2)\n    : expr(val1, val2) { }"]}],["$","p",null,{"children":[["$","code","0",{"children":["expr"]}],"是类的成员变量，它声明为："]}],["$","$L4","38",{"className":"cpp","children":["__gmp_binary_expr<val1_type, val2_type, Op> expr;"]}],["$","p",null,{"children":["这个",["$","code","0",{"children":["__gmp_binary_expr"]}],"又是何方神圣呢？它定义如下："]}],["$","$L4","40",{"className":"cpp","children":["template <class T, class U, class Op>\nstruct __gmp_binary_expr\n{\n  typename __gmp_resolve_ref<T>::ref_type val1;\n  typename __gmp_resolve_ref<U>::ref_type val2;\n\n  __gmp_binary_expr(const T &v1, const U &v2) : val1(v1), val2(v2) { }\nprivate:\n  __gmp_binary_expr();\n};"]}],["$","p",null,{"children":["这有点令人一头雾水，定义这样的一个只有构造函数的类似乎没有什么特别的意义，我们需要寻找到用到它的函数。之前提到过，如果右值的类型是",["$","code","0",{"children":["mpz_class"]}],"，那么就不会产生问题。从，",["$","code","1",{"children":["mpz_expr<..>"]}],"变成",["$","code","2",{"children":["mpz_class"]}],"，一定发生了一个类型转换。这个类型转换的函数在哪里呢？再回到",["$","code","3",{"children":["mpz_class"]}],"的定义当中："]}],["$","$L4","42",{"className":"cpp","children":["template <class T>\n__gmp_expr(const __gmp_expr<mpz_t, T> &expr)\n{ mpz_init(mp); __gmp_set_expr(mp, expr); }\ntemplate <class T, class U>\nexplicit __gmp_expr(const __gmp_expr<T, U> &expr)\n{ mpz_init(mp); __gmp_set_expr(mp, expr); }"]}],["$","p",null,{"children":["这个函数毫无疑问是在将",["$","code","0",{"children":["__gmp_expr<...>"]}],"转换为",["$","code","1",{"children":["mpz_class"]}],"."," ","那么",["$","code","2",{"children":["__gmp_set_expr"]}],"又是在做什么呢？"]}],["$","p",null,{"children":["查看其定义："]}],["$","$L4","45",{"className":"cpp","children":["template <class T>\ninline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpz_t, T> &expr)\n{\n  expr.eval(z);\n}"]}],["$","p",null,{"children":["嗯？这个",["$","code","0",{"children":["eval"]}],"函数看起来是",["$","code","1",{"children":["__gmp_expr<T ...>"]}],"中定义的，我们再查看一下刚才的定义："]}],["$","$L4","47",{"className":"cpp","children":["void eval(typename __gmp_resolve_expr<T>::ptr_type p) const\n{ Op::eval(p, expr.val1.__get_mp(), expr.val2.__get_mp()); }"]}],["$","p",null,{"children":["转发到了",["$","code","0",{"children":["Op::eval"]}],"这个函数上。之前类型的",["$","code","1",{"children":["Op"]}],"是",["$","code","2",{"children":["__gmp_binary_plus"]}],"，它的",["$","code","3",{"children":["eval"]}],"函数是如何定义的呢？"]}],["$","$L4","49",{"className":"cpp","children":["struct __gmp_binary_plus\n{\n  static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)\n  { mpz_add(z, w, v); }"]}],["$","p",null,{"children":["这实在是十分亲切，我们终于搞明白了这一套组合拳到底是在做些什么事情。"]}],["$","p",null,{"children":["首先，",["$","code","0",{"children":["__gmp_expr< ... >"]}],"相当于一个语法树，它记录了所有的操作信息。当这个类型的值被转换为",["$","code","1",{"children":["mpz_class"]}],"时，进行求值，求完的值被放到了转换后的绑定中。"]}],["$","p",null,{"children":["可是，这究竟有何意义？在我看来，这样的代码没有简化任何逻辑。C++编译器完全可以保证不产生多余的复制，实际上，如此复杂的构造和直白地写一个类并重载运算符的效果几乎是完全一致的。"]}],["$","p",null,{"children":["唯一的好处，就是当变量使用",["$","code","0",{"children":["auto"]}],"而不是",["$","code","1",{"children":["mpz_class"]}],"时，变量本身是语法树而不是值，只有当需要这个表达式的值时（也就是进行类型转换时）才进行求值。这就是所谓的『惰性求值』。"]}],["$","p",null,{"children":["我很难理解在数值计算任务上进行惰性求值究竟有什么好处。惰性求值最大的好处就是不会算出不必要的值，比如说："]}],["$","$L4","55",{"className":"scheme","children":["(define (f) (f))\n(define (g t1 t2) (t2))\n\n(g (f) 1) ;在scheme中，无限循环"]}],["$","$L4","56",{"className":"haskell","children":["f = f\ng t1 t2 = t2\ng f 1 --在haskell中，这会得到 1"]}],["$","p",null,{"children":["可是，在这样的数值计算任务中，我们一般不会进行任何多余的计算。惰性求值本身不能简化必要计算，从性能上来说，这毫无优势。"]}],["$","p",null,{"children":["而且，这设计会产生刚才的严重错误。这是因为，每个",["$","code","0",{"children":["__gmp_binary_expr"]}],"保存的实际上是两个变量的",["$","code","1",{"children":["const"]}],"引用，而从根本上来说，",["$","code","2",{"children":["const"]}],"引用是无法捕获一个右值的。调用"]}],["$","$L4","59",{"className":"cpp","children":["__gmp_binary_expr(const T &v1, const U &v2) : val1(v1), val2(v2) { }"]}],["$","p",null,{"children":["只会把指向",["$","code","0",{"children":["v1"]}],"的指针赋值给",["$","code","1",{"children":["val1"]}],"，把指向",["$","code","2",{"children":["v2"]}],"的指针赋值给",["$","code","3",{"children":["val2"]}],"。"]}],["$","p",null,{"children":["回过头来再看这句代码："]}],["$","$L4","62",{"className":"cpp","children":["const auto a = mpz_class { 1 } + mpz_class { 2 };\n..."]}],["$","p",null,{"children":["它实际上会变成："]}],["$","$L4","64",{"className":"cpp","children":["mpz_class temp1 {1}, temp2 {2};\na = temp1 + temp2;\n~temp1(); ~temp2();\n..."]}],["$","p",null,{"children":["当析构函数执行之后，",["$","code","0",{"children":["a"]}],"这棵语法树中节点所指向的目标已经被完全析构，访问这些对象的代码全部是错误的。换句话说，",["$","code","1",{"children":["a"]}],"合法的时光仅存在于当前语句执行完、下一条语句还未执行的那一瞬间而已。"]}],["$","h2",null,{"className":"text-3xl","id":"解决问题","children":[["$","$L3",null,{"href":"#解决问题","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["解决问题"]]}],["$","p",null,{"children":["要解决问题，有两个方法："]}],["$","ul","68",{"children":[["$","li","0",{"children":["修改",["$","code","0",{"children":["gmpxx.h"]}],"."]}],["$","li","1",{"children":["所有的声明全部使用",["$","code","0",{"children":["mpz_class"]}],"而不是",["$","code","1",{"children":["auto"]}],"."]}]]}],["$","p",null,{"children":["不过，即使修改这个文件，",["$","code","0",{"children":["const&"]}],"不能捕获右值的问题仍然是无法解决的。"]}],["$","p",null,{"children":["把",["$","code","0",{"children":["__gmp_binary_expr"]}],"改为值语义怎么样？换句话说，我们让",["$","code","1",{"children":["val1"]}],"，",["$","code","2",{"children":["val2"]}],"不再是",["$","code","3",{"children":["const &T"]}],"和",["$","code","4",{"children":["const &U"]}],"而是真正的",["$","code","5",{"children":["T"]}],"和",["$","code","6",{"children":["U"]}],"."]}],["$","p",null,{"children":["这可以无痛地解决",["$","code","0",{"children":["const auto a = mpz_class { 1 } + mpz_class { 2 };"]}],"的问题。因为",["$","code","1",{"children":["mpz_class{1}"]}],"和",["$","code","2",{"children":["mpz_class{2}"]}],"都是『右值』，或者说是『X值』，有『右值引用』这个方法可以无痛地交接资源。实际上，如果只是解决加法的问题，我们只需要修改几个地方即可："]}],["$","$L4","72",{"className":"cpp","children":["$5"]}],["$","$L4","73",{"className":"cpp","children":["/* 修改这个类，使得构造函数有右值引用的版本 */\ntemplate <class T, class Op>\nclass __gmp_expr\n<T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, T>, Op> >\n{\nprivate:\n  typedef __gmp_expr<T, T> val1_type;\n  typedef __gmp_expr<T, T> val2_type;\n\n  __gmp_binary_expr<val1_type, val2_type, Op> expr;\npublic:\n  __gmp_expr(const val1_type &val1, const val2_type &val2)\n    : expr(val1, val2) { } \n  __gmp_expr(val1_type &&val1, val2_type &&val2) // 新加入的构造函数\n    : expr(std::move(val1), std::move(val2)) { }"]}],["$","$L4","74",{"className":"cpp","children":["template <class Op>\nstruct __gmp_binary_expr<mpz_class, mpz_class, Op>\n{\n  mpz_class val1;\n  mpz_class val2;\n  __gmp_binary_expr(const mpz_class &v1, const mpz_class &v2) \n    : val1(v1), val2(v2) { }\n  __gmp_binary_expr(mpz_class &&v1, mpz_class &&v2) \n    : val1(std::move(v1)), val2(std::move(v2)) { }\nprivate:\n  __gmp_binary_expr();\n};"]}],["$","p",null,{"children":["自定义一个",["$","code","0",{"children":["__gmp_binary_expr"]}],"的特化，处理两个都是",["$","code","1",{"children":["mpz_class"]}],"的场合。"]}],["$","p",null,{"children":["这样就可以使得上述代码得到正确的",["$","code","0",{"children":["3"]}],"."]}],["$","p",null,{"children":["然而，先不说都修正完的工作量，如此修正我们必然会遇到一个问题：",["$","em","0",{"children":["如果传入的是左值，则无法进行『无痛』的移动，要进行复制，这是不利于性能的"]}],"。"]}],["$","p",null,{"children":["怎样解决这个问题呢？答案是（至少我）解决不了。"]}],["$","h2",null,{"className":"text-3xl","id":"gc与raii","children":[["$","$L3",null,{"href":"#gc与raii","color":"secondary","className":"pr-3 no-underline hover:underline text-primary font-sans","children":"#"}],["GC与RAII"]]}],["$","p",null,{"children":["上面的问题在有GC的语言中，简单来说不算问题。即使是在python这样的语言中，不断地得到一个资源的绑定并不会产生任何复制："]}],["$","$L4","81",{"className":"python","children":["a = [1, 2, 3, 4]\nb = a\nc = b"]}],["$","p",null,{"children":["当然，这是因为",["$","code","0",{"children":["a"]}],"、",["$","code","1",{"children":["b"]}],"、",["$","code","2",{"children":["c"]}],"实际上都是指向同一个对象的，类似于",["$","code","3",{"children":["const &"]}],"."]}],["$","p",null,{"children":["可是，有GC语言里的",["$","code","0",{"children":["const &"]}],"可以完美地解决『不能捕获右值』的问题："]}],["$","$L4","84",{"className":"python","children":["class A:\n    def __init__(self, arr):\n        self.arr = arr\n        \na = A([1,2,3,4])"]}],["$","p",null,{"children":["从根本上来说，RAII不能使得同一个栈上的对象被两个绑定所同时『拥有』，栈上的对象被消除的规则是严格的作用域规则，不能出现『从栈上借对象』这样的情况。而有GC语言由于『对象』和『对象所拥有的资源』都在堆上，甚至是一体的，所以不会出现这个问题。"]}],["$","p",null,{"children":["这样来看，RAII是不能替代GC的。当然，Rust等语言可能可以通过一些别的办法来解决这个问题。不过，我们可以下这个结论：在C++中，RAII的能力终究是有限的。"]}],["$","div",null,{"className":"notes","children":"$undefined"}]]}]]}]],null],null]},[["$","div",null,{"className":" relative w-full py-12 shadow-xl shadow-slate-700/20 ring-1 ring-gray-900/5 dark:shadow-slate-100/20 dark:ring-gray-100/5 lg:mx-auto lg:max-w-5xl lg:pt-16 lg:pb-28","children":["$","div",null,{"className":"prose prose-natural dark:prose-invert mx-auto max-w-full px-8 sm:px-16","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","$7","children","posts","children","$8","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ecc949282143a457.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]}],null],null]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","$7","children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh-cn","suppressHydrationWarning":true,"children":["$","body",null,{"className":"text-foreground bg-background min-h-screen","children":["$","$La",null,{"children":["$Lb",["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","$7","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]}]}]}],null],null]},[["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/52457f8b0fc09a26.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ad2762ca96cee671.css","precedence":"next","crossOrigin":"$undefined"}]]}],null],null],[null,"$Lc"]]]]
d:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"Navbar"]
e:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"NavbarBrand"]
10:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"NavbarItem"]
13:I[53693,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"NavbarContent"]
14:I[81946,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"default"]
15:I[48125,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"default"]
b:["$","$Ld",null,{"shouldHideOnScroll":true,"children":[["$","$Le",null,{"className":"flex flex-row gap-4","children":[["$","p",null,{"className":"font-bold text-inherit","children":"$Lf"}],["$","$L10",null,{"children":"$L11"}],["$","$L10",null,{"children":"$L12"}]]}],["$","$L13",null,{"justify":"end","className":"gap-1","children":[["$","$L10",null,{"children":["$","$L14",null,{}]}],["$","$L10",null,{"children":["$","$L15",null,{}]}]]}]]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Aya's Blog"}],["$","meta","3",{"name":"description","content":"A site powered by next.js and pandoc"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
16:I[9678,["706","static/chunks/706-97ed238ee5a03fb5.js","469","static/chunks/469-7ee2e4c850f58403.js","911","static/chunks/911-e9f556f9b03e931c.js","373","static/chunks/373-fbdb9516436dc720.js","203","static/chunks/app/%5Blocale%5D/layout-a565b40c48425316.js"],"default"]
f:["$","$L16",null,{"locale":"zh-cn","localePrefix":"always","href":"/","aria-label":"主页","children":"主页"}]
11:["$","$L16",null,{"locale":"zh-cn","localePrefix":"always","href":"/blog/","className":"font-bold","aria-label":"博客","children":"博客"}]
12:["$","$L16",null,{"locale":"zh-cn","localePrefix":"always","href":"/favorites/","className":"font-bold","aria-label":"园地","children":"园地"}]
